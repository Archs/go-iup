// Copyright (C) 2011 visualfc. All rights reserved.
// Use of this source code is governed by a MIT license 
// that can be found in the COPYRIGHT file.

// gencb.lua
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package iup

/*
#include <stdlib.h>
#include <iup.h>

*/
import "C"
import (
	"unsafe"
	"syscall"
)

const (
	DIALOG = "dialog"
	FILEDLG = "filedlg"
	MESSAGEDLG = "messagedlg"
	COLORDLG = "colordlg"
	FONTDLG = "fontdlg"
	FILL = "fill"
	HBOX = "hbox"
	VBOX = "vbox"
	ZBOX = "zbox"
	RADIO = "radio"
	NORMALIZER = "normalizer"
	CBOX = "cbox"
	SBOX = "sbox"
	SPLIT = "split"
	ITEM = "item"
	MENU = "menu"
	SEPARATOR = "separator"
	SUBMENU = "submenu"
	CLIPBOARD = "clipboard"
	TIMER = "timer"
	USER = "user"
	BUTTON = "button"
	CANVAS = "canvas"
	FRAME = "frame"
	LABEL = "label"
	LIST = "list"
	PROGRESSBAR = "progressbar"
	SPIN = "spin"
	SPINBOX = "spinbox"
	TABS = "tabs"
	TEXT = "text"
	TOGGLE = "toggle"
	TREE = "tree"
	VAL = "val"
	CELLS = "cells"
	COLORBAR = "colorbar"
	COLORBROWSER = "colorbrowser"
	DIAL = "dial"
	MATRIX = "matrix"
	OLECONTROL = "olecontrol"
	PPLOT = "pplot"
	WEBBROWSER = "webbrowser"
	TUIOCLIENT = "tuioclient"
)

func RegisterAllClass() {
	RegisterClass("dialog",NewClassInfo("dialog",dialog_SetCallback))
	RegisterClass("filedlg",NewClassInfo("filedlg",filedlg_SetCallback))
	RegisterClass("messagedlg",NewClassInfo("messagedlg",messagedlg_SetCallback))
	RegisterClass("colordlg",NewClassInfo("colordlg",colordlg_SetCallback))
	RegisterClass("fontdlg",NewClassInfo("fontdlg",fontdlg_SetCallback))
	RegisterClass("fill",NewClassInfo("fill",fill_SetCallback))
	RegisterClass("hbox",NewClassInfo("hbox",hbox_SetCallback))
	RegisterClass("vbox",NewClassInfo("vbox",vbox_SetCallback))
	RegisterClass("zbox",NewClassInfo("zbox",zbox_SetCallback))
	RegisterClass("radio",NewClassInfo("radio",radio_SetCallback))
	RegisterClass("normalizer",NewClassInfo("normalizer",normalizer_SetCallback))
	RegisterClass("cbox",NewClassInfo("cbox",cbox_SetCallback))
	RegisterClass("sbox",NewClassInfo("sbox",sbox_SetCallback))
	RegisterClass("split",NewClassInfo("split",split_SetCallback))
	RegisterClass("item",NewClassInfo("item",item_SetCallback))
	RegisterClass("menu",NewClassInfo("menu",menu_SetCallback))
	RegisterClass("separator",NewClassInfo("separator",separator_SetCallback))
	RegisterClass("submenu",NewClassInfo("submenu",submenu_SetCallback))
	RegisterClass("clipboard",NewClassInfo("clipboard",clipboard_SetCallback))
	RegisterClass("timer",NewClassInfo("timer",timer_SetCallback))
	RegisterClass("user",NewClassInfo("user",user_SetCallback))
	RegisterClass("button",NewClassInfo("button",button_SetCallback))
	RegisterClass("canvas",NewClassInfo("canvas",canvas_SetCallback))
	RegisterClass("frame",NewClassInfo("frame",frame_SetCallback))
	RegisterClass("label",NewClassInfo("label",label_SetCallback))
	RegisterClass("list",NewClassInfo("list",list_SetCallback))
	RegisterClass("progressbar",NewClassInfo("progressbar",progressbar_SetCallback))
	RegisterClass("spin",NewClassInfo("spin",spin_SetCallback))
	RegisterClass("spinbox",NewClassInfo("spinbox",spinbox_SetCallback))
	RegisterClass("tabs",NewClassInfo("tabs",tabs_SetCallback))
	RegisterClass("text",NewClassInfo("text",text_SetCallback))
	RegisterClass("toggle",NewClassInfo("toggle",toggle_SetCallback))
	RegisterClass("tree",NewClassInfo("tree",tree_SetCallback))
	RegisterClass("val",NewClassInfo("val",val_SetCallback))
	RegisterClass("cells",NewClassInfo("cells",cells_SetCallback))
	RegisterClass("colorbar",NewClassInfo("colorbar",colorbar_SetCallback))
	RegisterClass("colorbrowser",NewClassInfo("colorbrowser",colorbrowser_SetCallback))
	RegisterClass("dial",NewClassInfo("dial",dial_SetCallback))
	RegisterClass("matrix",NewClassInfo("matrix",matrix_SetCallback))
	RegisterClass("olecontrol",NewClassInfo("olecontrol",olecontrol_SetCallback))
	RegisterClass("pplot",NewClassInfo("pplot",pplot_SetCallback))
	RegisterClass("webbrowser",NewClassInfo("webbrowser",webbrowser_SetCallback))
	RegisterClass("tuioclient",NewClassInfo("tuioclient",tuioclient_SetCallback))
}

// Iup control Dialog
//
// Callback CLOSE_CB : func(arg *DialogClose)
//
// Callback RESIZE_CB : func(arg *DialogResize)
//
// Callback DROPFILES_CB : func(arg *DialogDropFiles)
//
// Callback SHOW_CB : func(arg *DialogShow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dialog(a ...interface{}) *Handle {
	return New(DIALOG, a...)
}

// Iup control FileDlg
//
// Callback FILE_CB : func(arg *FileDlgFile)
//
// Callback HELP_CB : func(arg *CommonHelp)
func FileDlg(a ...interface{}) *Handle {
	return New(FILEDLG, a...)
}

// Iup control MessageDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func MessageDlg(a ...interface{}) *Handle {
	return New(MESSAGEDLG, a...)
}

// Iup control ColorDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func ColorDlg(a ...interface{}) *Handle {
	return New(COLORDLG, a...)
}

// Iup control FontDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func FontDlg(a ...interface{}) *Handle {
	return New(FONTDLG, a...)
}

// Iup control Fill
//
// 
func Fill(a ...interface{}) *Handle {
	return New(FILL, a...)
}

// Iup control Hbox
//
// 
func Hbox(a ...interface{}) *Handle {
	return New(HBOX, a...)
}

// Iup control Vbox
//
// 
func Vbox(a ...interface{}) *Handle {
	return New(VBOX, a...)
}

// Iup control Zbox
//
// 
func Zbox(a ...interface{}) *Handle {
	return New(ZBOX, a...)
}

// Iup control Radio
//
// 
func Radio(a ...interface{}) *Handle {
	return New(RADIO, a...)
}

// Iup control Normalizer
//
// 
func Normalizer(a ...interface{}) *Handle {
	return New(NORMALIZER, a...)
}

// Iup control Cbox
//
// 
func Cbox(a ...interface{}) *Handle {
	return New(CBOX, a...)
}

// Iup control Sbox
//
// 
func Sbox(a ...interface{}) *Handle {
	return New(SBOX, a...)
}

// Iup control Split
//
// 
func Split(a ...interface{}) *Handle {
	return New(SPLIT, a...)
}

// Iup control Item
//
// Callback ACTION : func(arg *ItemAction)
//
// Callback HIGHLIGHT_CB : func(arg *ItemHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback HELP_CB : func(arg *CommonHelp)
func Item(a ...interface{}) *Handle {
	return New(ITEM, a...)
}

// Iup control Menu
//
// Callback OPEN_CB : func(arg *MenuOpen)
//
// Callback MENUCLOSE_CB : func(arg *MenuClose)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Menu(a ...interface{}) *Handle {
	return New(MENU, a...)
}

// Iup control Separator
//
// 
func Separator(a ...interface{}) *Handle {
	return New(SEPARATOR, a...)
}

// Iup control SubMenu
//
// Callback HIGHLIGHT_CB : func(arg *SubMenuHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func SubMenu(a ...interface{}) *Handle {
	return New(SUBMENU, a...)
}

// Iup control Clipboard
//
// 
func Clipboard(a ...interface{}) *Handle {
	return New(CLIPBOARD, a...)
}

// Iup control Timer
//
// Callback ACTION : func(arg *TimerAction)
func Timer(a ...interface{}) *Handle {
	return New(TIMER, a...)
}

// Iup control User
//
// 
func User(a ...interface{}) *Handle {
	return New(USER, a...)
}

// Iup control Button
//
// Callback ACTION : func(arg *ButtonAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Button(a ...interface{}) *Handle {
	return New(BUTTON, a...)
}

// Iup control Canvas
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *CanvasDropFiles)
//
// Callback FOCUS_CB : func(arg *CanvasFocus)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback WHEEL_CB : func(arg *CanvasWheel)
//
// Callback WOM_CB : func(arg *CanvasWom)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Canvas(a ...interface{}) *Handle {
	return New(CANVAS, a...)
}

// Iup control Frame
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Frame(a ...interface{}) *Handle {
	return New(FRAME, a...)
}

// Iup control Label
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *LabelDropFiles)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func Label(a ...interface{}) *Handle {
	return New(LABEL, a...)
}

// Iup control List
//
// Callback ACTION : func(arg *ListAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *ListCaret)
//
// Callback DBLCLICK_CB : func(arg *ListDblclick)
//
// Callback DROPDOWN_CB : func(arg *ListDropDown)
//
// Callback DROPFILES_CB : func(arg *ListDropFiles)
//
// Callback EDIT_CB : func(arg *ListEdit)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback MULTISELECT_CB : func(arg *ListMultiSelect)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func List(a ...interface{}) *Handle {
	return New(LIST, a...)
}

// Iup control ProgressBar
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func ProgressBar(a ...interface{}) *Handle {
	return New(PROGRESSBAR, a...)
}

// Iup control Spin
//
// Callback SPIN_CB : func(arg *SpinInc)
func Spin(a ...interface{}) *Handle {
	return New(SPIN, a...)
}

// Iup control SpinBox
//
// Callback SPIN_CB : func(arg *SpinBoxInc)
func SpinBox(a ...interface{}) *Handle {
	return New(SPINBOX, a...)
}

// Iup control Tabs
//
// Callback TABCHANGE_CB : func(arg *TabsChange)
//
// Callback TABCHANGEPOS_CB : func(arg *TabsChangePos)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tabs(a ...interface{}) *Handle {
	return New(TABS, a...)
}

// Iup control Text
//
// Callback ACTION : func(arg *TextAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *TextCaret)
//
// Callback DROPFILES_CB : func(arg *TextDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback SPIN_CB : func(arg *TextSpin)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Text(a ...interface{}) *Handle {
	return New(TEXT, a...)
}

// Iup control Toggle
//
// Callback ACTION : func(arg *ToggleAction)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Toggle(a ...interface{}) *Handle {
	return New(TOGGLE, a...)
}

// Iup control Tree
//
// Callback SELECTION_CB : func(arg *TreeSelection)
//
// Callback MULTISELECTION_CB : func(arg *TreeMultiSelection)
//
// Callback BRANCHOPEN_CB : func(arg *TreeBranchOpen)
//
// Callback BRANCHCLOSE_CB : func(arg *TreeBranchClose)
//
// Callback EXECUTELEAF_CB : func(arg *TreeExecuteLeaf)
//
// Callback SHOWRENAME_CB : func(arg *TreeShowRename)
//
// Callback RENAME_CB : func(arg *TreeRename)
//
// Callback DRAGDROP_CB : func(arg *TreeDragDrop)
//
// Callback NODEREMOVED_CB : func(arg *TreeNodeRemoved)
//
// Callback RIGHTCLICK_CB : func(arg *TreeRightClick)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *TreeDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tree(a ...interface{}) *Handle {
	return New(TREE, a...)
}

// Iup control Val
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Val(a ...interface{}) *Handle {
	return New(VAL, a...)
}

// Iup control Cells
//
// Callback DRAW_CB : func(arg *CellsDraw)
//
// Callback HEIGHT_CB : func(arg *CellsHeight)
//
// Callback HSPAN_CB : func(arg *CellsHspan)
//
// Callback MOUSECLICK_CB : func(arg *CellsMouseClick)
//
// Callback MOUSEMOTION_CB : func(arg *CellsMouseMotion)
//
// Callback NCOLS_CB : func(arg *CellsNcols)
//
// Callback NLINES_CB : func(arg *CellsNlines)
//
// Callback SCROLLING_CB : func(arg *CellsScrolling)
//
// Callback VSPAN_CB : func(arg *CellsVspan)
//
// Callback WIDTH_CB : func(arg *CellsWidth)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Cells(a ...interface{}) *Handle {
	return New(CELLS, a...)
}

// Iup control Colorbar
//
// Callback CELL_CB : func(arg *ColorbarCell)
//
// Callback EXTENDED_CB : func(arg *ColorbarExtended)
//
// Callback SELECT_CB : func(arg *ColorbarSelect)
//
// Callback SWITCH_CB : func(arg *ColorbarSwitch)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Colorbar(a ...interface{}) *Handle {
	return New(COLORBAR, a...)
}

// Iup control ColorBrowser
//
// Callback CHANGE_CB : func(arg *ColorBrowserChange)
//
// Callback DRAG_CB : func(arg *ColorBrowserDrag)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func ColorBrowser(a ...interface{}) *Handle {
	return New(COLORBROWSER, a...)
}

// Iup control Dial
//
// Callback BUTTON_PRESS_CB : func(arg *DialButtonPress)
//
// Callback BUTTON_RELEASE_CB : func(arg *DialButtonRelease)
//
// Callback MOUSEMOVE_CB : func(arg *DialMouseMove)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dial(a ...interface{}) *Handle {
	return New(DIAL, a...)
}

// Iup control Matrix
//
// Callback ACTION_CB : func(arg *MatrixAction)
//
// Callback CLICK_CB : func(arg *MatrixClick)
//
// Callback RELEASE_CB : func(arg *MatrixRelease)
//
// Callback MOUSEMOVE_CB : func(arg *MatrixMouseMove)
//
// Callback ENTERITEM_CB : func(arg *MatrixEnterItem)
//
// Callback LEAVEITEM_CB : func(arg *MatrixLeaveItem)
//
// Callback SCROLLTOP_CB : func(arg *MatrixScrollTop)
//
// Callback BGCOLOR_CB : func(arg *MatrixBgcolor)
//
// Callback FGCOLOR_CB : func(arg *MatrixFgcolor)
//
// Callback FONT_CB : func(arg *MatrixFont)
//
// Callback DRAW_CB : func(arg *MatrixDraw)
//
// Callback DROPCHECK_CB : func(arg *MatrixDropCheck)
//
// Callback DROP_CB : func(arg *MatrixDrop)
//
// Callback DROPSELECT_CB : func(arg *MatrixDropSelect)
//
// Callback EDITION_CB : func(arg *MatrixEdition)
//
// Callback VALUE_CB : func(arg *MatrixValue)
//
// Callback VALUE_EDIT_CB : func(arg *MatrixValueEdit)
//
// Callback MARK_CB : func(arg *MatrixMark)
//
// Callback MARKEDIT_CB : func(arg *MatrixMarkEdit)
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback MAP_CB : func(arg *CommonMap)
func Matrix(a ...interface{}) *Handle {
	return New(MATRIX, a...)
}

// Iup control OleControl
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func OleControl(a ...interface{}) *Handle {
	return New(OLECONTROL, a...)
}

// Iup control PPlot
//
// Callback DELETE_CB : func(arg *PPlotDelete)
//
// Callback DELETEBEGIN_CB : func(arg *PPlotDeleteBegin)
//
// Callback DELETEEND_CB : func(arg *PPlotDeleteEnd)
//
// Callback SELECT_CB : func(arg *PPlotSelect)
//
// Callback SELECTBEGIN_CB : func(arg *PPlotSelectBegin)
//
// Callback SELECTEND_CB : func(arg *PPlotSelectEnd)
//
// Callback EDIT_CB : func(arg *PPlotEdit)
//
// Callback EDITBEGIN_CB : func(arg *PPlotEditBegin)
//
// Callback EDITEND_CB : func(arg *PPlotEditEnd)
//
// Callback PREDRAW_CB : func(arg *PPlotPreDraw)
//
// Callback POSTDRAW_CB : func(arg *PPlotPostDraw)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func PPlot(a ...interface{}) *Handle {
	return New(PPLOT, a...)
}

// Iup control WebBrowser
//
// Callback COMPLETED_CB : func(arg *WebBrowserCompleted)
//
// Callback ERROR_CB : func(arg *WebBrowserError)
//
// Callback NAVIGATE_CB : func(arg *WebBrowserNavigate)
//
// Callback NEWWINDOW_CB : func(arg *WebBrowserNewWindow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func WebBrowser(a ...interface{}) *Handle {
	return New(WEBBROWSER, a...)
}

// Iup control TuioClient
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func TuioClient(a ...interface{}) *Handle {
	return New(TUIOCLIENT, a...)
}

// Iup callback IUP_DEFAULT_ACTION
type CommonDefaultAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_MAP_CB
type CommonMap struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_UNMAP_CB
type CommonUnmap struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DESTROY_CB
type CommonDestroy struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_GETFOCUS_CB
type CommonGetFocus struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_KILLFOCUS_CB
type CommonKillFocus struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ENTERWINDOW_CB
type CommonEnterWindow struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_LEAVEWINDOW_CB
type CommonLeaveWindow struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HELP_CB
type CommonHelp struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_K_ANY
type CommonKeyAny struct {
	Sender *Handle
	Return int
	Key int
}

// Iup callback IUP_CLOSE_CB
type DialogClose struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_RESIZE_CB
type DialogResize struct {
	Sender *Handle
	Return int
	Width int
	Height int
}

// Iup callback IUP_DROPFILES_CB
type DialogDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_SHOW_CB
type DialogShow struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_FILE_CB
type FileDlgFile struct {
	Sender *Handle
	Return int
	FileName string
	Status string
}

// Iup callback IUP_ACTION
type ItemAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HIGHLIGHT_CB
type ItemHighlight struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_OPEN_CB
type MenuOpen struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_MENUCLOSE_CB
type MenuClose struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HIGHLIGHT_CB
type SubMenuHighlight struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ACTION
type TimerAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ACTION
type ButtonAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_BUTTON_CB
type MouseButton struct {
	Sender *Handle
	Return int
	Button int
	Pressed int
	X int
	Y int
	Status string
}

// Iup callback IUP_ACTION
type CanvasAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DROPFILES_CB
type CanvasDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_FOCUS_CB
type CanvasFocus struct {
	Sender *Handle
	Return int
	Focus int
}

// Iup callback IUP_MOTION_CB
type MouseMotion struct {
	Sender *Handle
	Return int
	X int
	Y int
	Status string
}

// Iup callback IUP_KEYPRESS_CB
type CanvasKeyPress struct {
	Sender *Handle
	Return int
	C int
	Press int
}

// Iup callback IUP_RESIZE_CB
type CanvasResize struct {
	Sender *Handle
	Return int
	Width int
	Height int
}

// Iup callback IUP_SCROLL_CB
type CanvasScroll struct {
	Sender *Handle
	Return int
	Op int
	PosX float32
	PosY float32
}

// Iup callback IUP_TOUCH_CB
type TouchEvent struct {
	Sender *Handle
	Return int
	X int
	Y int
	State string
}

// Iup callback IUP_MULTITOUCH_CB
type MultiTouchEvent struct {
	Sender *Handle
	Return int
	Count int
	Pid *int
	Px *int
	Py *int
	PState *int
}

// Iup callback IUP_WHEEL_CB
type CanvasWheel struct {
	Sender *Handle
	Return int
	Delta float32
	X int
	Y int
	Status string
}

// Iup callback IUP_WOM_CB
type CanvasWom struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_DROPFILES_CB
type LabelDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_ACTION
type ListAction struct {
	Sender *Handle
	Return int
	Text string
	Item int
	State int
}

// Iup callback IUP_CARET_CB
type ListCaret struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Pos int
}

// Iup callback IUP_DBLCLICK_CB
type ListDblclick struct {
	Sender *Handle
	Return int
	Item int
	Text string
}

// Iup callback IUP_DROPDOWN_CB
type ListDropDown struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_DROPFILES_CB
type ListDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_EDIT_CB
type ListEdit struct {
	Sender *Handle
	Return int
	C int
	NewValue string
}

// Iup callback IUP_MULTISELECT_CB
type ListMultiSelect struct {
	Sender *Handle
	Return int
	Value string
}

// Iup callback IUP_VALUECHANGED_CB
type ValueChanged struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SPIN_CB
type SpinInc struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_SPIN_CB
type SpinBoxInc struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_TABCHANGE_CB
type TabsChange struct {
	Sender *Handle
	Return int
	NewTab *Handle
	OldTab *Handle
}

// Iup callback IUP_TABCHANGEPOS_CB
type TabsChangePos struct {
	Sender *Handle
	Return int
	NewPos int
	OldPos int
}

// Iup callback IUP_ACTION
type TextAction struct {
	Sender *Handle
	Return int
	C int
	NewValue string
}

// Iup callback IUP_CARET_CB
type TextCaret struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Pos int
}

// Iup callback IUP_DROPFILES_CB
type TextDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_SPIN_CB
type TextSpin struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_ACTION
type ToggleAction struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_SELECTION_CB
type TreeSelection struct {
	Sender *Handle
	Return int
	Id int
	Status int
}

// Iup callback IUP_MULTISELECTION_CB
type TreeMultiSelection struct {
	Sender *Handle
	Return int
	Ids *int
	N int
}

// Iup callback IUP_BRANCHOPEN_CB
type TreeBranchOpen struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_BRANCHCLOSE_CB
type TreeBranchClose struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_EXECUTELEAF_CB
type TreeExecuteLeaf struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_SHOWRENAME_CB
type TreeShowRename struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_RENAME_CB
type TreeRename struct {
	Sender *Handle
	Return int
	Id int
	Title string
}

// Iup callback IUP_DRAGDROP_CB
type TreeDragDrop struct {
	Sender *Handle
	Return int
	DragId int
	DropId int
	IsShift int
	IsControl int
}

// Iup callback IUP_NODEREMOVED_CB
type TreeNodeRemoved struct {
	Sender *Handle
	Return int
	UserData uintptr
}

// Iup callback IUP_RIGHTCLICK_CB
type TreeRightClick struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_DROPFILES_CB
type TreeDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_DRAW_CB
type CellsDraw struct {
	Sender *Handle
	Return int
	Line int
	Column int
	Xmin int
	Xmax int
	Ymin int
	Ymax int
	Cnv uintptr
}

// Iup callback IUP_HEIGHT_CB
type CellsHeight struct {
	Sender *Handle
	Return int
	Line int
}

// Iup callback IUP_HSPAN_CB
type CellsHspan struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_MOUSECLICK_CB
type CellsMouseClick struct {
	Sender *Handle
	Return int
	Button int
	Pressed int
	Line int
	Column int
	X int
	Y int
	Status string
}

// Iup callback IUP_MOUSEMOTION_CB
type CellsMouseMotion struct {
	Sender *Handle
	Return int
	Line int
	Column int
	X int
	Y int
	R string
}

// Iup callback IUP_NCOLS_CB
type CellsNcols struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_NLINES_CB
type CellsNlines struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SCROLLING_CB
type CellsScrolling struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_VSPAN_CB
type CellsVspan struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_WIDTH_CB
type CellsWidth struct {
	Sender *Handle
	Return int
	Column int
}

// Iup callback IUP_CELL_CB
type ColorbarCell struct {
	Sender *Handle
	Return string
	Cell int
}

// Iup callback IUP_EXTENDED_CB
type ColorbarExtended struct {
	Sender *Handle
	Return int
	Cell int
}

// Iup callback IUP_SELECT_CB
type ColorbarSelect struct {
	Sender *Handle
	Return int
	Cell int
	Type int
}

// Iup callback IUP_SWITCH_CB
type ColorbarSwitch struct {
	Sender *Handle
	Return int
	PrimCell int
	SecCell int
}

// Iup callback IUP_CHANGE_CB
type ColorBrowserChange struct {
	Sender *Handle
	Return int
	R byte
	G byte
	B byte
}

// Iup callback IUP_DRAG_CB
type ColorBrowserDrag struct {
	Sender *Handle
	Return int
	R byte
	G byte
	B byte
}

// Iup callback IUP_BUTTON_PRESS_CB
type DialButtonPress struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_BUTTON_RELEASE_CB
type DialButtonRelease struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_MOUSEMOVE_CB
type DialMouseMove struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_ACTION_CB
type MatrixAction struct {
	Sender *Handle
	Return int
	Key int
	Lin int
	Col int
	Edition int
	Value string
}

// Iup callback IUP_CLICK_CB
type MatrixClick struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Status string
}

// Iup callback IUP_RELEASE_CB
type MatrixRelease struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Status string
}

// Iup callback IUP_MOUSEMOVE_CB
type MatrixMouseMove struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_ENTERITEM_CB
type MatrixEnterItem struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_LEAVEITEM_CB
type MatrixLeaveItem struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_SCROLLTOP_CB
type MatrixScrollTop struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_BGCOLOR_CB
type MatrixBgcolor struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Red *uint
	Green *uint
	Blue *uint
}

// Iup callback IUP_FGCOLOR_CB
type MatrixFgcolor struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Red *uint
	Green *uint
	Blue *uint
}

// Iup callback IUP_FONT_CB
type MatrixFont struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DRAW_CB
type MatrixDraw struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	X1 int
	X2 int
	Y1 int
	Y2 int
	Cnv uintptr
}

// Iup callback IUP_DROPCHECK_CB
type MatrixDropCheck struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DROP_CB
type MatrixDrop struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DROPSELECT_CB
type MatrixDropSelect struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Drop *Handle
	T string
	I int
	V int
}

// Iup callback IUP_EDITION_CB
type MatrixEdition struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Mode int
	Update int
}

// Iup callback IUP_VALUE_CB
type MatrixValue struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_VALUE_EDIT_CB
type MatrixValueEdit struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	NewValue string
}

// Iup callback IUP_MARK_CB
type MatrixMark struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_MARKEDIT_CB
type MatrixMarkEdit struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Marked int
}

// Iup callback IUP_DELETE_CB
type PPlotDelete struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
}

// Iup callback IUP_DELETEBEGIN_CB
type PPlotDeleteBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DELETEEND_CB
type PPlotDeleteEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SELECT_CB
type PPlotSelect struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
	Select int
}

// Iup callback IUP_SELECTBEGIN_CB
type PPlotSelectBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SELECTEND_CB
type PPlotSelectEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_EDIT_CB
type PPlotEdit struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
	NewX *float32
	NewY *float32
}

// Iup callback IUP_EDITBEGIN_CB
type PPlotEditBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_EDITEND_CB
type PPlotEditEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_PREDRAW_CB
type PPlotPreDraw struct {
	Sender *Handle
	Return int
	Canvas uintptr
}

// Iup callback IUP_POSTDRAW_CB
type PPlotPostDraw struct {
	Sender *Handle
	Return int
	Canvas uintptr
}

// Iup callback IUP_COMPLETED_CB
type WebBrowserCompleted struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_ERROR_CB
type WebBrowserError struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_NAVIGATE_CB
type WebBrowserNavigate struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_NEWWINDOW_CB
type WebBrowserNewWindow struct {
	Sender *Handle
	Return int
	Url string
}

func common_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonDefaultAction):
		h.SetCallbackProc("DEFAULT_ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonDefaultAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonDestroy):
		h.SetCallbackProc("DESTROY_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonDestroy{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonGetFocus):
		h.SetCallbackProc("GETFOCUS_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonGetFocus{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonKillFocus):
		h.SetCallbackProc("KILLFOCUS_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonKillFocus{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonEnterWindow):
		h.SetCallbackProc("ENTERWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonEnterWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonLeaveWindow):
		h.SetCallbackProc("LEAVEWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonLeaveWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonKeyAny):
		h.SetCallbackProc("K_ANY", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &CommonKeyAny{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func dialog_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*DialogClose):
		h.SetCallbackProc("CLOSE_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &DialogClose{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*DialogResize):
		h.SetCallbackProc("RESIZE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &DialogResize{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*DialogDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &DialogDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*DialogShow):
		h.SetCallbackProc("SHOW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &DialogShow{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func filedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*FileDlgFile):
		h.SetCallbackProc("FILE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 *C.char) int {
			arg := &FileDlgFile{h,DEFAULT,C.GoString(N1),C.GoString(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func messagedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func colordlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func fontdlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func fill_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func hbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func vbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func zbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func radio_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func normalizer_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func cbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func sbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func split_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func item_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ItemAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ItemAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*ItemHighlight):
		h.SetCallbackProc("HIGHLIGHT_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ItemHighlight{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonHelp):
		h.SetCallbackProc("HELP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonHelp{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func menu_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MenuOpen):
		h.SetCallbackProc("OPEN_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &MenuOpen{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*MenuClose):
		h.SetCallbackProc("MENUCLOSE_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &MenuClose{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func separator_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func submenu_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SubMenuHighlight):
		h.SetCallbackProc("HIGHLIGHT_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &SubMenuHighlight{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func clipboard_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func timer_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TimerAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &TimerAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func user_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func button_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ButtonAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ButtonAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func canvas_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CanvasAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CanvasAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &CanvasDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasFocus):
		h.SetCallbackProc("FOCUS_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &CanvasFocus{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*MouseMotion):
		h.SetCallbackProc("MOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasKeyPress):
		h.SetCallbackProc("KEYPRESS_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CanvasKeyPress{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasResize):
		h.SetCallbackProc("RESIZE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CanvasResize{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasScroll):
		h.SetCallbackProc("SCROLL_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 float32,N3 float32) int {
			arg := &CanvasScroll{h,DEFAULT,N1,N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*TouchEvent):
		h.SetCallbackProc("TOUCH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &TouchEvent{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*MultiTouchEvent):
		h.SetCallbackProc("MULTITOUCH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *int,N3 *int,N4 *int,N5 *int) int {
			arg := &MultiTouchEvent{h,DEFAULT,N1,N2,N3,N4,N5}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasWheel):
		h.SetCallbackProc("WHEEL_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 float32,N2 int,N3 int,N4 *C.char) int {
			arg := &CanvasWheel{h,DEFAULT,N1,N2,N3,C.GoString(N4)}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasWom):
		h.SetCallbackProc("WOM_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &CanvasWom{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func frame_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func label_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*LabelDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &LabelDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonEnterWindow):
		h.SetCallbackProc("ENTERWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonEnterWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonLeaveWindow):
		h.SetCallbackProc("LEAVEWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonLeaveWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func list_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ListAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int) int {
			arg := &ListAction{h,DEFAULT,C.GoString(N1),N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*ListCaret):
		h.SetCallbackProc("CARET_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
			arg := &ListCaret{h,DEFAULT,N1,N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*ListDblclick):
		h.SetCallbackProc("DBLCLICK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *C.char) int {
			arg := &ListDblclick{h,DEFAULT,N1,C.GoString(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*ListDropDown):
		h.SetCallbackProc("DROPDOWN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &ListDropDown{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*ListDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &ListDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*ListEdit):
		h.SetCallbackProc("EDIT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *C.char) int {
			arg := &ListEdit{h,DEFAULT,N1,C.GoString(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*MouseMotion):
		h.SetCallbackProc("MOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*ListMultiSelect):
		h.SetCallbackProc("MULTISELECT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char) int {
			arg := &ListMultiSelect{h,DEFAULT,C.GoString(N1)}
			v(arg)
			return arg.Return
		}))
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func progressbar_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func spin_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SpinInc):
		h.SetCallbackProc("SPIN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &SpinInc{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func spinbox_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SpinBoxInc):
		h.SetCallbackProc("SPIN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &SpinBoxInc{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func tabs_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TabsChange):
		h.SetCallbackProc("TABCHANGE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 unsafe.Pointer,N2 unsafe.Pointer) int {
			arg := &TabsChange{h,DEFAULT,(*Handle)(N1),(*Handle)(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*TabsChangePos):
		h.SetCallbackProc("TABCHANGEPOS_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &TabsChangePos{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func text_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TextAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *C.char) int {
			arg := &TextAction{h,DEFAULT,N1,C.GoString(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*TextCaret):
		h.SetCallbackProc("CARET_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
			arg := &TextCaret{h,DEFAULT,N1,N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*TextDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &TextDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*MouseMotion):
		h.SetCallbackProc("MOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*TextSpin):
		h.SetCallbackProc("SPIN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TextSpin{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func toggle_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ToggleAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &ToggleAction{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func tree_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TreeSelection):
		h.SetCallbackProc("SELECTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &TreeSelection{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*TreeMultiSelection):
		h.SetCallbackProc("MULTISELECTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *int,N2 int) int {
			arg := &TreeMultiSelection{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*TreeBranchOpen):
		h.SetCallbackProc("BRANCHOPEN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TreeBranchOpen{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*TreeBranchClose):
		h.SetCallbackProc("BRANCHCLOSE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TreeBranchClose{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*TreeExecuteLeaf):
		h.SetCallbackProc("EXECUTELEAF_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TreeExecuteLeaf{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*TreeShowRename):
		h.SetCallbackProc("SHOWRENAME_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TreeShowRename{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*TreeRename):
		h.SetCallbackProc("RENAME_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *C.char) int {
			arg := &TreeRename{h,DEFAULT,N1,C.GoString(N2)}
			v(arg)
			return arg.Return
		}))
	case func(*TreeDragDrop):
		h.SetCallbackProc("DRAGDROP_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int) int {
			arg := &TreeDragDrop{h,DEFAULT,N1,N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*TreeNodeRemoved):
		h.SetCallbackProc("NODEREMOVED_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 uintptr) int {
			arg := &TreeNodeRemoved{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*TreeRightClick):
		h.SetCallbackProc("RIGHTCLICK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &TreeRightClick{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*TreeDropFiles):
		h.SetCallbackProc("DROPFILES_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
			arg := &TreeDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*MouseMotion):
		h.SetCallbackProc("MOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func val_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func cells_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CellsDraw):
		h.SetCallbackProc("DRAW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 uintptr) int {
			arg := &CellsDraw{h,DEFAULT,N1,N2,N3,N4,N5,N6,N7}
			v(arg)
			return arg.Return
		}))
	case func(*CellsHeight):
		h.SetCallbackProc("HEIGHT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &CellsHeight{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*CellsHspan):
		h.SetCallbackProc("HSPAN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CellsHspan{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*CellsMouseClick):
		h.SetCallbackProc("MOUSECLICK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 *C.char) int {
			arg := &CellsMouseClick{h,DEFAULT,N1,N2,N3,N4,N5,N6,C.GoString(N7)}
			v(arg)
			return arg.Return
		}))
	case func(*CellsMouseMotion):
		h.SetCallbackProc("MOUSEMOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char) int {
			arg := &CellsMouseMotion{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*CellsNcols):
		h.SetCallbackProc("NCOLS_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CellsNcols{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CellsNlines):
		h.SetCallbackProc("NLINES_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CellsNlines{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CellsScrolling):
		h.SetCallbackProc("SCROLLING_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CellsScrolling{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*CellsVspan):
		h.SetCallbackProc("VSPAN_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CellsVspan{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*CellsWidth):
		h.SetCallbackProc("WIDTH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &CellsWidth{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func colorbar_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ColorbarCell):
		h.SetCallbackProc("CELL_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) *C.char {
			arg := &ColorbarCell{h,"",N1}
			v(arg)
			size := len(arg.Return)
			ch := make([]byte,size+1)
			copy(ch,arg.Return)
			ch[size] = 0
			return (*C.char)(unsafe.Pointer(&ch[0]))
		}))
	case func(*ColorbarExtended):
		h.SetCallbackProc("EXTENDED_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int) int {
			arg := &ColorbarExtended{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*ColorbarSelect):
		h.SetCallbackProc("SELECT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &ColorbarSelect{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*ColorbarSwitch):
		h.SetCallbackProc("SWITCH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &ColorbarSwitch{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func colorbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ColorBrowserChange):
		h.SetCallbackProc("CHANGE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 C.uchar,N2 C.uchar,N3 C.uchar) int {
			arg := &ColorBrowserChange{h,DEFAULT,byte(N1),byte(N2),byte(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*ColorBrowserDrag):
		h.SetCallbackProc("DRAG_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 C.uchar,N2 C.uchar,N3 C.uchar) int {
			arg := &ColorBrowserDrag{h,DEFAULT,byte(N1),byte(N2),byte(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func dial_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*DialButtonPress):
		h.SetCallbackProc("BUTTON_PRESS_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 float64) int {
			arg := &DialButtonPress{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*DialButtonRelease):
		h.SetCallbackProc("BUTTON_RELEASE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 float64) int {
			arg := &DialButtonRelease{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*DialMouseMove):
		h.SetCallbackProc("MOUSEMOVE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 float64) int {
			arg := &DialMouseMove{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*ValueChanged):
		h.SetCallbackProc("VALUECHANGED_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &ValueChanged{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func matrix_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MatrixAction):
		h.SetCallbackProc("ACTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char) int {
			arg := &MatrixAction{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixClick):
		h.SetCallbackProc("CLICK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MatrixClick{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixRelease):
		h.SetCallbackProc("RELEASE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MatrixRelease{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixMouseMove):
		h.SetCallbackProc("MOUSEMOVE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixMouseMove{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixEnterItem):
		h.SetCallbackProc("ENTERITEM_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixEnterItem{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixLeaveItem):
		h.SetCallbackProc("LEAVEITEM_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixLeaveItem{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixScrollTop):
		h.SetCallbackProc("SCROLLTOP_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixScrollTop{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixBgcolor):
		h.SetCallbackProc("BGCOLOR_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.uint,N4 *C.uint,N5 *C.uint) int {
			arg := &MatrixBgcolor{h,DEFAULT,N1,N2,(*uint)(unsafe.Pointer(N3)),(*uint)(unsafe.Pointer(N4)),(*uint)(unsafe.Pointer(N5))}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixFgcolor):
		h.SetCallbackProc("FGCOLOR_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.uint,N4 *C.uint,N5 *C.uint) int {
			arg := &MatrixFgcolor{h,DEFAULT,N1,N2,(*uint)(unsafe.Pointer(N3)),(*uint)(unsafe.Pointer(N4)),(*uint)(unsafe.Pointer(N5))}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixFont):
		h.SetCallbackProc("FONT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixFont{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixDraw):
		h.SetCallbackProc("DRAW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 uintptr) int {
			arg := &MatrixDraw{h,DEFAULT,N1,N2,N3,N4,N5,N6,N7}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixDropCheck):
		h.SetCallbackProc("DROPCHECK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixDropCheck{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixDrop):
		h.SetCallbackProc("DROP_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixDrop{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixDropSelect):
		h.SetCallbackProc("DROPSELECT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 unsafe.Pointer,N4 *C.char,N5 int,N6 int) int {
			arg := &MatrixDropSelect{h,DEFAULT,N1,N2,(*Handle)(N3),C.GoString(N4),N5,N6}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixEdition):
		h.SetCallbackProc("EDITION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int) int {
			arg := &MatrixEdition{h,DEFAULT,N1,N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixValue):
		h.SetCallbackProc("VALUE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixValue{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixValueEdit):
		h.SetCallbackProc("VALUE_EDIT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MatrixValueEdit{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixMark):
		h.SetCallbackProc("MARK_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &MatrixMark{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MatrixMarkEdit):
		h.SetCallbackProc("MARKEDIT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
			arg := &MatrixMarkEdit{h,DEFAULT,N1,N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasAction):
		h.SetCallbackProc("ACTION", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CanvasAction{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasScroll):
		h.SetCallbackProc("SCROLL_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 float32,N3 float32) int {
			arg := &CanvasScroll{h,DEFAULT,N1,N2,N3}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasKeyPress):
		h.SetCallbackProc("KEYPRESS_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CanvasKeyPress{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MouseMotion):
		h.SetCallbackProc("MOTION_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*CanvasResize):
		h.SetCallbackProc("RESIZE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int) int {
			arg := &CanvasResize{h,DEFAULT,N1,N2}
			v(arg)
			return arg.Return
		}))
	case func(*MouseButton):
		h.SetCallbackProc("BUTTON_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char,noused uintptr) int {
			arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
			v(arg)
			return arg.Return
		}))
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func olecontrol_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		h.SetCallbackProc("MAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonMap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonUnmap):
		h.SetCallbackProc("UNMAP_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonUnmap{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonGetFocus):
		h.SetCallbackProc("GETFOCUS_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonGetFocus{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonKillFocus):
		h.SetCallbackProc("KILLFOCUS_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonKillFocus{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonEnterWindow):
		h.SetCallbackProc("ENTERWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonEnterWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*CommonLeaveWindow):
		h.SetCallbackProc("LEAVEWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &CommonLeaveWindow{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	default:
		return false
	}
	return true
}

func pplot_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*PPlotDelete):
		h.SetCallbackProc("DELETE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32) int {
			arg := &PPlotDelete{h,DEFAULT,N1,N2,N3,N4}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotDeleteBegin):
		h.SetCallbackProc("DELETEBEGIN_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotDeleteBegin{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotDeleteEnd):
		h.SetCallbackProc("DELETEEND_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotDeleteEnd{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotSelect):
		h.SetCallbackProc("SELECT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32,N5 int) int {
			arg := &PPlotSelect{h,DEFAULT,N1,N2,N3,N4,N5}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotSelectBegin):
		h.SetCallbackProc("SELECTBEGIN_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotSelectBegin{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotSelectEnd):
		h.SetCallbackProc("SELECTEND_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotSelectEnd{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotEdit):
		h.SetCallbackProc("EDIT_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32,N5 *float32,N6 *float32) int {
			arg := &PPlotEdit{h,DEFAULT,N1,N2,N3,N4,N5,N6}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotEditBegin):
		h.SetCallbackProc("EDITBEGIN_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotEditBegin{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotEditEnd):
		h.SetCallbackProc("EDITEND_CB", syscall.NewCallback(func(ih unsafe.Pointer) int {
			arg := &PPlotEditEnd{h,DEFAULT}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotPreDraw):
		h.SetCallbackProc("PREDRAW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 uintptr) int {
			arg := &PPlotPreDraw{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	case func(*PPlotPostDraw):
		h.SetCallbackProc("POSTDRAW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 uintptr) int {
			arg := &PPlotPostDraw{h,DEFAULT,N1}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func webbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*WebBrowserCompleted):
		h.SetCallbackProc("COMPLETED_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char) int {
			arg := &WebBrowserCompleted{h,DEFAULT,C.GoString(N1)}
			v(arg)
			return arg.Return
		}))
	case func(*WebBrowserError):
		h.SetCallbackProc("ERROR_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char) int {
			arg := &WebBrowserError{h,DEFAULT,C.GoString(N1)}
			v(arg)
			return arg.Return
		}))
	case func(*WebBrowserNavigate):
		h.SetCallbackProc("NAVIGATE_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char) int {
			arg := &WebBrowserNavigate{h,DEFAULT,C.GoString(N1)}
			v(arg)
			return arg.Return
		}))
	case func(*WebBrowserNewWindow):
		h.SetCallbackProc("NEWWINDOW_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 *C.char) int {
			arg := &WebBrowserNewWindow{h,DEFAULT,C.GoString(N1)}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func tuioclient_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TouchEvent):
		h.SetCallbackProc("TOUCH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
			arg := &TouchEvent{h,DEFAULT,N1,N2,C.GoString(N3)}
			v(arg)
			return arg.Return
		}))
	case func(*MultiTouchEvent):
		h.SetCallbackProc("MULTITOUCH_CB", syscall.NewCallback(func(ih unsafe.Pointer,N1 int,N2 *int,N3 *int,N4 *int,N5 *int) int {
			arg := &MultiTouchEvent{h,DEFAULT,N1,N2,N3,N4,N5}
			v(arg)
			return arg.Return
		}))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}
