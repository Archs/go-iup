// Copyright (C) 2011 visualfc. All rights reserved.
// Use of this source code is governed by a MIT license 
// that can be found in the COPYRIGHT file.

// gencb.lua
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package iup

/*
#include <stdlib.h>
#include <iup.h>
#define GOIUP "_GOIUP_"

// IUP definitions not defined
#define IUP_UNMAP_CB        "UNMAP_CB"
#define IUP_DESTROY_CB      "DESTROY_CB"
#define IUP_CARET_CB        "CARET_CB"
#define IUP_DBLCLICK_CB     "DBLCLICK_CB"
#define IUP_EDIT_CB         "EDIT_CB"
#define IUP_MULTISELECT_CB  "MULTISELECT_CB"
#define IUP_VALUECHANGED_CB "VALUECHANGED_CB"
#define IUP_TABCHANGE_CB    "TABCHANGE_CB"
#define IUP_TABCHANGEPOS_CB "TABCHANGEPOS_CB"
#define IUP_SPIN_CB         "SPIN_CB"
#define IUP_FILE_CB			"FILE_CB"
#define IUP_FOCUS_CB		"FOCUS_CB"
#define IUP_TOUCH_CB		"TOUCH_CB"
#define IUP_MULTITOUCH_CB	"MULTITOUCH_CB"
#define IUP_DROPDOWN_CB		"DROPDOWN_CB"
#define IUP_MULTISELECTION_CB "MULTISELECTION_CB"
#define IUP_SHOWRENAME_CB	"SHOWRENAME_CB"
#define IUP_RENAME_CB		"RENAME_CB"
#define IUP_DRAGDROP_CB		"DRAGDROP_CB"
#define IUP_NODEREMOVED_CB	"NODEREMOVED_CB"
#define IUP_BUTTON_PRESS_CB	"BUTTON_PRESS_CB"
#define IUP_BUTTON_RELEASE_CB "BUTTON_RELEASE_CB"
#define IUP_ACTION_CB		"ACTION_CB"
#define IUP_RELEASE_CB		"RELEASE_CB"
#define IUP_SCROLLTOP_CB	"SCROLLTOP_CB"
#define IUP_BGCOLOR_CB		"BGCOLOR_CB"
#define IUP_FGCOLOR_CB		"FGCOLOR_CB"
#define IUP_FONT_CB			"FONT_CB"
#define IUP_MARK_CB			"MARK_CB"
#define IUP_MARKEDIT_CB		"MARKEDIT_CB"
#define IUP_DELETE_CB		"DELETE_CB"
#define IUP_DELETEBEGIN_CB	"DELETEBEGIN_CB"
#define IUP_DELETEEND_CB	"DELETEEND_CB"
#define IUP_SELECTBEGIN_CB	"SELECTBEGIN_CB"
#define IUP_SELECTEND_CB	"SELECTEND_CB"
#define IUP_EDITBEGIN_CB	"EDITBEGIN_CB"
#define	IUP_EDITEND_CB		"EDITEND_CB"
#define IUP_PREDRAW_CB		"PREDRAW_CB"
#define IUP_POSTDRAW_CB		"POSTDRAW_CB"
#define IUP_COMPLETED_CB	"COMPLETED_CB"
#define IUP_ERROR_CB		"ERROR_CB"
#define IUP_NAVIGATE_CB		"NAVIGATE_CB"
#define IUP_NEWWINDOW_CB	"NEWWINDOW_CB"

#define GO_DEFAULT_ACTION GOIUP IUP_DEFAULT_ACTION
extern int goCommonDefaultAction(Ihandle*);
void iupSetCommonDefaultAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DEFAULT_ACTION,ptr);
	IupSetCallback(ih,IUP_DEFAULT_ACTION,(Icallback)&goCommonDefaultAction);
}
void* iupGetCommonDefaultAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DEFAULT_ACTION);
}

#define GO_MAP_CB GOIUP IUP_MAP_CB
extern int goCommonMap(Ihandle*);
void iupSetCommonMap(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MAP_CB,ptr);
	IupSetCallback(ih,IUP_MAP_CB,(Icallback)&goCommonMap);
}
void* iupGetCommonMap(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MAP_CB);
}

#define GO_UNMAP_CB GOIUP IUP_UNMAP_CB
extern int goCommonUnmap(Ihandle*);
void iupSetCommonUnmap(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_UNMAP_CB,ptr);
	IupSetCallback(ih,IUP_UNMAP_CB,(Icallback)&goCommonUnmap);
}
void* iupGetCommonUnmap(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_UNMAP_CB);
}

#define GO_DESTROY_CB GOIUP IUP_DESTROY_CB
extern int goCommonDestroy(Ihandle*);
void iupSetCommonDestroy(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DESTROY_CB,ptr);
	IupSetCallback(ih,IUP_DESTROY_CB,(Icallback)&goCommonDestroy);
}
void* iupGetCommonDestroy(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DESTROY_CB);
}

#define GO_GETFOCUS_CB GOIUP IUP_GETFOCUS_CB
extern int goCommonGetFocus(Ihandle*);
void iupSetCommonGetFocus(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_GETFOCUS_CB,ptr);
	IupSetCallback(ih,IUP_GETFOCUS_CB,(Icallback)&goCommonGetFocus);
}
void* iupGetCommonGetFocus(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_GETFOCUS_CB);
}

#define GO_KILLFOCUS_CB GOIUP IUP_KILLFOCUS_CB
extern int goCommonKillFocus(Ihandle*);
void iupSetCommonKillFocus(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_KILLFOCUS_CB,ptr);
	IupSetCallback(ih,IUP_KILLFOCUS_CB,(Icallback)&goCommonKillFocus);
}
void* iupGetCommonKillFocus(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_KILLFOCUS_CB);
}

#define GO_ENTERWINDOW_CB GOIUP IUP_ENTERWINDOW_CB
extern int goCommonEnterWindow(Ihandle*);
void iupSetCommonEnterWindow(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ENTERWINDOW_CB,ptr);
	IupSetCallback(ih,IUP_ENTERWINDOW_CB,(Icallback)&goCommonEnterWindow);
}
void* iupGetCommonEnterWindow(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ENTERWINDOW_CB);
}

#define GO_LEAVEWINDOW_CB GOIUP IUP_LEAVEWINDOW_CB
extern int goCommonLeaveWindow(Ihandle*);
void iupSetCommonLeaveWindow(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_LEAVEWINDOW_CB,ptr);
	IupSetCallback(ih,IUP_LEAVEWINDOW_CB,(Icallback)&goCommonLeaveWindow);
}
void* iupGetCommonLeaveWindow(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_LEAVEWINDOW_CB);
}

#define GO_HELP_CB GOIUP IUP_HELP_CB
extern int goCommonHelp(Ihandle*);
void iupSetCommonHelp(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_HELP_CB,ptr);
	IupSetCallback(ih,IUP_HELP_CB,(Icallback)&goCommonHelp);
}
void* iupGetCommonHelp(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_HELP_CB);
}

#define GO_K_ANY GOIUP IUP_K_ANY
extern int goCommonKeyAny(Ihandle*,int);
void iupSetCommonKeyAny(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_K_ANY,ptr);
	IupSetCallback(ih,IUP_K_ANY,(Icallback)&goCommonKeyAny);
}
void* iupGetCommonKeyAny(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_K_ANY);
}

#define GO_CLOSE_CB GOIUP IUP_CLOSE_CB
extern int goDialogClose(Ihandle*);
void iupSetDialogClose(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CLOSE_CB,ptr);
	IupSetCallback(ih,IUP_CLOSE_CB,(Icallback)&goDialogClose);
}
void* iupGetDialogClose(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CLOSE_CB);
}

#define GO_RESIZE_CB GOIUP IUP_RESIZE_CB
extern int goDialogResize(Ihandle*,int,int);
void iupSetDialogResize(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_RESIZE_CB,ptr);
	IupSetCallback(ih,IUP_RESIZE_CB,(Icallback)&goDialogResize);
}
void* iupGetDialogResize(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_RESIZE_CB);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goDialogDropFiles(Ihandle*,char*,int,int,int);
void iupSetDialogDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goDialogDropFiles);
}
void* iupGetDialogDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_SHOW_CB GOIUP IUP_SHOW_CB
extern int goDialogShow(Ihandle*,int);
void iupSetDialogShow(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SHOW_CB,ptr);
	IupSetCallback(ih,IUP_SHOW_CB,(Icallback)&goDialogShow);
}
void* iupGetDialogShow(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SHOW_CB);
}

#define GO_FILE_CB GOIUP IUP_FILE_CB
extern int goFileDlgFile(Ihandle*,char*,char*);
void iupSetFileDlgFile(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_FILE_CB,ptr);
	IupSetCallback(ih,IUP_FILE_CB,(Icallback)&goFileDlgFile);
}
void* iupGetFileDlgFile(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_FILE_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goItemAction(Ihandle*);
void iupSetItemAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goItemAction);
}
void* iupGetItemAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_HIGHLIGHT_CB GOIUP IUP_HIGHLIGHT_CB
extern int goItemHighlight(Ihandle*);
void iupSetItemHighlight(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_HIGHLIGHT_CB,ptr);
	IupSetCallback(ih,IUP_HIGHLIGHT_CB,(Icallback)&goItemHighlight);
}
void* iupGetItemHighlight(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_HIGHLIGHT_CB);
}

#define GO_OPEN_CB GOIUP IUP_OPEN_CB
extern int goMenuOpen(Ihandle*);
void iupSetMenuOpen(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_OPEN_CB,ptr);
	IupSetCallback(ih,IUP_OPEN_CB,(Icallback)&goMenuOpen);
}
void* iupGetMenuOpen(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_OPEN_CB);
}

#define GO_MENUCLOSE_CB GOIUP IUP_MENUCLOSE_CB
extern int goMenuClose(Ihandle*);
void iupSetMenuClose(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MENUCLOSE_CB,ptr);
	IupSetCallback(ih,IUP_MENUCLOSE_CB,(Icallback)&goMenuClose);
}
void* iupGetMenuClose(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MENUCLOSE_CB);
}

#define GO_HIGHLIGHT_CB GOIUP IUP_HIGHLIGHT_CB
extern int goSubMenuHighlight(Ihandle*);
void iupSetSubMenuHighlight(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_HIGHLIGHT_CB,ptr);
	IupSetCallback(ih,IUP_HIGHLIGHT_CB,(Icallback)&goSubMenuHighlight);
}
void* iupGetSubMenuHighlight(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_HIGHLIGHT_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goTimerAction(Ihandle*);
void iupSetTimerAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goTimerAction);
}
void* iupGetTimerAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goButtonAction(Ihandle*);
void iupSetButtonAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goButtonAction);
}
void* iupGetButtonAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_BUTTON_CB GOIUP IUP_BUTTON_CB
extern int goMouseButton(Ihandle*,int,int,int,int,char*);
void iupSetMouseButton(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BUTTON_CB,ptr);
	IupSetCallback(ih,IUP_BUTTON_CB,(Icallback)&goMouseButton);
}
void* iupGetMouseButton(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BUTTON_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goCanvasAction(Ihandle*);
void iupSetCanvasAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goCanvasAction);
}
void* iupGetCanvasAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goCanvasDropFiles(Ihandle*,char*,int,int,int);
void iupSetCanvasDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goCanvasDropFiles);
}
void* iupGetCanvasDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_FOCUS_CB GOIUP IUP_FOCUS_CB
extern int goCanvasFocus(Ihandle*,int);
void iupSetCanvasFocus(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_FOCUS_CB,ptr);
	IupSetCallback(ih,IUP_FOCUS_CB,(Icallback)&goCanvasFocus);
}
void* iupGetCanvasFocus(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_FOCUS_CB);
}

#define GO_MOTION_CB GOIUP IUP_MOTION_CB
extern int goMouseMotion(Ihandle*,int,int,char*);
void iupSetMouseMotion(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MOTION_CB,ptr);
	IupSetCallback(ih,IUP_MOTION_CB,(Icallback)&goMouseMotion);
}
void* iupGetMouseMotion(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MOTION_CB);
}

#define GO_KEYPRESS_CB GOIUP IUP_KEYPRESS_CB
extern int goCanvasKeyPress(Ihandle*,int,int);
void iupSetCanvasKeyPress(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_KEYPRESS_CB,ptr);
	IupSetCallback(ih,IUP_KEYPRESS_CB,(Icallback)&goCanvasKeyPress);
}
void* iupGetCanvasKeyPress(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_KEYPRESS_CB);
}

#define GO_RESIZE_CB GOIUP IUP_RESIZE_CB
extern int goCanvasResize(Ihandle*,int,int);
void iupSetCanvasResize(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_RESIZE_CB,ptr);
	IupSetCallback(ih,IUP_RESIZE_CB,(Icallback)&goCanvasResize);
}
void* iupGetCanvasResize(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_RESIZE_CB);
}

#define GO_SCROLL_CB GOIUP IUP_SCROLL_CB
extern int goCanvasScroll(Ihandle*,int,float,float);
void iupSetCanvasScroll(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SCROLL_CB,ptr);
	IupSetCallback(ih,IUP_SCROLL_CB,(Icallback)&goCanvasScroll);
}
void* iupGetCanvasScroll(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SCROLL_CB);
}

#define GO_TOUCH_CB GOIUP IUP_TOUCH_CB
extern int goTouchEvent(Ihandle*,int,int,char*);
void iupSetTouchEvent(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_TOUCH_CB,ptr);
	IupSetCallback(ih,IUP_TOUCH_CB,(Icallback)&goTouchEvent);
}
void* iupGetTouchEvent(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_TOUCH_CB);
}

#define GO_MULTITOUCH_CB GOIUP IUP_MULTITOUCH_CB
extern int goMultiTouchEvent(Ihandle*,int,int*,int*,int*,int*);
void iupSetMultiTouchEvent(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MULTITOUCH_CB,ptr);
	IupSetCallback(ih,IUP_MULTITOUCH_CB,(Icallback)&goMultiTouchEvent);
}
void* iupGetMultiTouchEvent(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MULTITOUCH_CB);
}

#define GO_WHEEL_CB GOIUP IUP_WHEEL_CB
extern int goCanvasWheel(Ihandle*,float,int,int,char*);
void iupSetCanvasWheel(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_WHEEL_CB,ptr);
	IupSetCallback(ih,IUP_WHEEL_CB,(Icallback)&goCanvasWheel);
}
void* iupGetCanvasWheel(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_WHEEL_CB);
}

#define GO_WOM_CB GOIUP IUP_WOM_CB
extern int goCanvasWom(Ihandle*,int);
void iupSetCanvasWom(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_WOM_CB,ptr);
	IupSetCallback(ih,IUP_WOM_CB,(Icallback)&goCanvasWom);
}
void* iupGetCanvasWom(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_WOM_CB);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goLabelDropFiles(Ihandle*,char*,int,int,int);
void iupSetLabelDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goLabelDropFiles);
}
void* iupGetLabelDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goListAction(Ihandle*,char*,int,int);
void iupSetListAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goListAction);
}
void* iupGetListAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_CARET_CB GOIUP IUP_CARET_CB
extern int goListCaret(Ihandle*,int,int,int);
void iupSetListCaret(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CARET_CB,ptr);
	IupSetCallback(ih,IUP_CARET_CB,(Icallback)&goListCaret);
}
void* iupGetListCaret(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CARET_CB);
}

#define GO_DBLCLICK_CB GOIUP IUP_DBLCLICK_CB
extern int goListDblclick(Ihandle*,int,char*);
void iupSetListDblclick(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DBLCLICK_CB,ptr);
	IupSetCallback(ih,IUP_DBLCLICK_CB,(Icallback)&goListDblclick);
}
void* iupGetListDblclick(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DBLCLICK_CB);
}

#define GO_DROPDOWN_CB GOIUP IUP_DROPDOWN_CB
extern int goListDropDown(Ihandle*,int);
void iupSetListDropDown(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPDOWN_CB,ptr);
	IupSetCallback(ih,IUP_DROPDOWN_CB,(Icallback)&goListDropDown);
}
void* iupGetListDropDown(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPDOWN_CB);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goListDropFiles(Ihandle*,char*,int,int,int);
void iupSetListDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goListDropFiles);
}
void* iupGetListDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_EDIT_CB GOIUP IUP_EDIT_CB
extern int goListEdit(Ihandle*,int,char*);
void iupSetListEdit(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EDIT_CB,ptr);
	IupSetCallback(ih,IUP_EDIT_CB,(Icallback)&goListEdit);
}
void* iupGetListEdit(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EDIT_CB);
}

#define GO_MULTISELECT_CB GOIUP IUP_MULTISELECT_CB
extern int goListMultiSelect(Ihandle*,char*);
void iupSetListMultiSelect(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MULTISELECT_CB,ptr);
	IupSetCallback(ih,IUP_MULTISELECT_CB,(Icallback)&goListMultiSelect);
}
void* iupGetListMultiSelect(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MULTISELECT_CB);
}

#define GO_VALUECHANGED_CB GOIUP IUP_VALUECHANGED_CB
extern int goValueChanged(Ihandle*);
void iupSetValueChanged(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_VALUECHANGED_CB,ptr);
	IupSetCallback(ih,IUP_VALUECHANGED_CB,(Icallback)&goValueChanged);
}
void* iupGetValueChanged(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_VALUECHANGED_CB);
}

#define GO_SPIN_CB GOIUP IUP_SPIN_CB
extern int goSpinInc(Ihandle*,int);
void iupSetSpinInc(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SPIN_CB,ptr);
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goSpinInc);
}
void* iupGetSpinInc(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SPIN_CB);
}

#define GO_SPIN_CB GOIUP IUP_SPIN_CB
extern int goSpinBoxInc(Ihandle*,int);
void iupSetSpinBoxInc(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SPIN_CB,ptr);
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goSpinBoxInc);
}
void* iupGetSpinBoxInc(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SPIN_CB);
}

#define GO_TABCHANGE_CB GOIUP IUP_TABCHANGE_CB
extern int goTabsChange(Ihandle*,Ihandle*,Ihandle*);
void iupSetTabsChange(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_TABCHANGE_CB,ptr);
	IupSetCallback(ih,IUP_TABCHANGE_CB,(Icallback)&goTabsChange);
}
void* iupGetTabsChange(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_TABCHANGE_CB);
}

#define GO_TABCHANGEPOS_CB GOIUP IUP_TABCHANGEPOS_CB
extern int goTabsChangePos(Ihandle*,int,int);
void iupSetTabsChangePos(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_TABCHANGEPOS_CB,ptr);
	IupSetCallback(ih,IUP_TABCHANGEPOS_CB,(Icallback)&goTabsChangePos);
}
void* iupGetTabsChangePos(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_TABCHANGEPOS_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goTextAction(Ihandle*,int,char*);
void iupSetTextAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goTextAction);
}
void* iupGetTextAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_CARET_CB GOIUP IUP_CARET_CB
extern int goTextCaret(Ihandle*,int,int,int);
void iupSetTextCaret(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CARET_CB,ptr);
	IupSetCallback(ih,IUP_CARET_CB,(Icallback)&goTextCaret);
}
void* iupGetTextCaret(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CARET_CB);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goTextDropFiles(Ihandle*,char*,int,int,int);
void iupSetTextDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goTextDropFiles);
}
void* iupGetTextDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_SPIN_CB GOIUP IUP_SPIN_CB
extern int goTextSpin(Ihandle*,int);
void iupSetTextSpin(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SPIN_CB,ptr);
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goTextSpin);
}
void* iupGetTextSpin(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SPIN_CB);
}

#define GO_ACTION GOIUP IUP_ACTION
extern int goToggleAction(Ihandle*,int);
void iupSetToggleAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION,ptr);
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goToggleAction);
}
void* iupGetToggleAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION);
}

#define GO_SELECTION_CB GOIUP IUP_SELECTION_CB
extern int goTreeSelection(Ihandle*,int,int);
void iupSetTreeSelection(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SELECTION_CB,ptr);
	IupSetCallback(ih,IUP_SELECTION_CB,(Icallback)&goTreeSelection);
}
void* iupGetTreeSelection(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SELECTION_CB);
}

#define GO_MULTISELECTION_CB GOIUP IUP_MULTISELECTION_CB
extern int goTreeMultiSelection(Ihandle*,int*,int);
void iupSetTreeMultiSelection(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MULTISELECTION_CB,ptr);
	IupSetCallback(ih,IUP_MULTISELECTION_CB,(Icallback)&goTreeMultiSelection);
}
void* iupGetTreeMultiSelection(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MULTISELECTION_CB);
}

#define GO_BRANCHOPEN_CB GOIUP IUP_BRANCHOPEN_CB
extern int goTreeBranchOpen(Ihandle*,int);
void iupSetTreeBranchOpen(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BRANCHOPEN_CB,ptr);
	IupSetCallback(ih,IUP_BRANCHOPEN_CB,(Icallback)&goTreeBranchOpen);
}
void* iupGetTreeBranchOpen(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BRANCHOPEN_CB);
}

#define GO_BRANCHCLOSE_CB GOIUP IUP_BRANCHCLOSE_CB
extern int goTreeBranchClose(Ihandle*,int);
void iupSetTreeBranchClose(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BRANCHCLOSE_CB,ptr);
	IupSetCallback(ih,IUP_BRANCHCLOSE_CB,(Icallback)&goTreeBranchClose);
}
void* iupGetTreeBranchClose(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BRANCHCLOSE_CB);
}

#define GO_EXECUTELEAF_CB GOIUP IUP_EXECUTELEAF_CB
extern int goTreeExecuteLeaf(Ihandle*,int);
void iupSetTreeExecuteLeaf(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EXECUTELEAF_CB,ptr);
	IupSetCallback(ih,IUP_EXECUTELEAF_CB,(Icallback)&goTreeExecuteLeaf);
}
void* iupGetTreeExecuteLeaf(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EXECUTELEAF_CB);
}

#define GO_SHOWRENAME_CB GOIUP IUP_SHOWRENAME_CB
extern int goTreeShowRename(Ihandle*,int);
void iupSetTreeShowRename(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SHOWRENAME_CB,ptr);
	IupSetCallback(ih,IUP_SHOWRENAME_CB,(Icallback)&goTreeShowRename);
}
void* iupGetTreeShowRename(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SHOWRENAME_CB);
}

#define GO_RENAME_CB GOIUP IUP_RENAME_CB
extern int goTreeRename(Ihandle*,int,char*);
void iupSetTreeRename(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_RENAME_CB,ptr);
	IupSetCallback(ih,IUP_RENAME_CB,(Icallback)&goTreeRename);
}
void* iupGetTreeRename(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_RENAME_CB);
}

#define GO_DRAGDROP_CB GOIUP IUP_DRAGDROP_CB
extern int goTreeDragDrop(Ihandle*,int,int,int,int);
void iupSetTreeDragDrop(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DRAGDROP_CB,ptr);
	IupSetCallback(ih,IUP_DRAGDROP_CB,(Icallback)&goTreeDragDrop);
}
void* iupGetTreeDragDrop(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DRAGDROP_CB);
}

#define GO_NODEREMOVED_CB GOIUP IUP_NODEREMOVED_CB
extern int goTreeNodeRemoved(Ihandle*,void*);
void iupSetTreeNodeRemoved(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_NODEREMOVED_CB,ptr);
	IupSetCallback(ih,IUP_NODEREMOVED_CB,(Icallback)&goTreeNodeRemoved);
}
void* iupGetTreeNodeRemoved(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_NODEREMOVED_CB);
}

#define GO_RIGHTCLICK_CB GOIUP IUP_RIGHTCLICK_CB
extern int goTreeRightClick(Ihandle*,int);
void iupSetTreeRightClick(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_RIGHTCLICK_CB,ptr);
	IupSetCallback(ih,IUP_RIGHTCLICK_CB,(Icallback)&goTreeRightClick);
}
void* iupGetTreeRightClick(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_RIGHTCLICK_CB);
}

#define GO_DROPFILES_CB GOIUP IUP_DROPFILES_CB
extern int goTreeDropFiles(Ihandle*,char*,int,int,int);
void iupSetTreeDropFiles(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPFILES_CB,ptr);
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goTreeDropFiles);
}
void* iupGetTreeDropFiles(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPFILES_CB);
}

#define GO_DRAW_CB GOIUP IUP_DRAW_CB
extern int goCellsDraw(Ihandle*,int,int,int,int,int,int,void*);
void iupSetCellsDraw(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DRAW_CB,ptr);
	IupSetCallback(ih,IUP_DRAW_CB,(Icallback)&goCellsDraw);
}
void* iupGetCellsDraw(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DRAW_CB);
}

#define GO_HEIGHT_CB GOIUP IUP_HEIGHT_CB
extern int goCellsHeight(Ihandle*,int);
void iupSetCellsHeight(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_HEIGHT_CB,ptr);
	IupSetCallback(ih,IUP_HEIGHT_CB,(Icallback)&goCellsHeight);
}
void* iupGetCellsHeight(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_HEIGHT_CB);
}

#define GO_HSPAN_CB GOIUP IUP_HSPAN_CB
extern int goCellsHspan(Ihandle*,int,int);
void iupSetCellsHspan(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_HSPAN_CB,ptr);
	IupSetCallback(ih,IUP_HSPAN_CB,(Icallback)&goCellsHspan);
}
void* iupGetCellsHspan(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_HSPAN_CB);
}

#define GO_MOUSECLICK_CB GOIUP IUP_MOUSECLICK_CB
extern int goCellsMouseClick(Ihandle*,int,int,int,int,int,int,char*);
void iupSetCellsMouseClick(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MOUSECLICK_CB,ptr);
	IupSetCallback(ih,IUP_MOUSECLICK_CB,(Icallback)&goCellsMouseClick);
}
void* iupGetCellsMouseClick(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MOUSECLICK_CB);
}

#define GO_MOUSEMOTION_CB GOIUP IUP_MOUSEMOTION_CB
extern int goCellsMouseMotion(Ihandle*,int,int,int,int,char*);
void iupSetCellsMouseMotion(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MOUSEMOTION_CB,ptr);
	IupSetCallback(ih,IUP_MOUSEMOTION_CB,(Icallback)&goCellsMouseMotion);
}
void* iupGetCellsMouseMotion(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MOUSEMOTION_CB);
}

#define GO_NCOLS_CB GOIUP IUP_NCOLS_CB
extern int goCellsNcols(Ihandle*);
void iupSetCellsNcols(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_NCOLS_CB,ptr);
	IupSetCallback(ih,IUP_NCOLS_CB,(Icallback)&goCellsNcols);
}
void* iupGetCellsNcols(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_NCOLS_CB);
}

#define GO_NLINES_CB GOIUP IUP_NLINES_CB
extern int goCellsNlines(Ihandle*);
void iupSetCellsNlines(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_NLINES_CB,ptr);
	IupSetCallback(ih,IUP_NLINES_CB,(Icallback)&goCellsNlines);
}
void* iupGetCellsNlines(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_NLINES_CB);
}

#define GO_SCROLLING_CB GOIUP IUP_SCROLLING_CB
extern int goCellsScrolling(Ihandle*,int,int);
void iupSetCellsScrolling(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SCROLLING_CB,ptr);
	IupSetCallback(ih,IUP_SCROLLING_CB,(Icallback)&goCellsScrolling);
}
void* iupGetCellsScrolling(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SCROLLING_CB);
}

#define GO_VSPAN_CB GOIUP IUP_VSPAN_CB
extern int goCellsVspan(Ihandle*,int,int);
void iupSetCellsVspan(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_VSPAN_CB,ptr);
	IupSetCallback(ih,IUP_VSPAN_CB,(Icallback)&goCellsVspan);
}
void* iupGetCellsVspan(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_VSPAN_CB);
}

#define GO_WIDTH_CB GOIUP IUP_WIDTH_CB
extern int goCellsWidth(Ihandle*,int);
void iupSetCellsWidth(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_WIDTH_CB,ptr);
	IupSetCallback(ih,IUP_WIDTH_CB,(Icallback)&goCellsWidth);
}
void* iupGetCellsWidth(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_WIDTH_CB);
}

#define GO_CELL_CB GOIUP IUP_CELL_CB
extern char* goColorbarCell(Ihandle*,int);
void iupSetColorbarCell(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CELL_CB,ptr);
	IupSetCallback(ih,IUP_CELL_CB,(Icallback)&goColorbarCell);
}
void* iupGetColorbarCell(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CELL_CB);
}

#define GO_EXTENDED_CB GOIUP IUP_EXTENDED_CB
extern int goColorbarExtended(Ihandle*,int);
void iupSetColorbarExtended(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EXTENDED_CB,ptr);
	IupSetCallback(ih,IUP_EXTENDED_CB,(Icallback)&goColorbarExtended);
}
void* iupGetColorbarExtended(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EXTENDED_CB);
}

#define GO_SELECT_CB GOIUP IUP_SELECT_CB
extern int goColorbarSelect(Ihandle*,int,int);
void iupSetColorbarSelect(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SELECT_CB,ptr);
	IupSetCallback(ih,IUP_SELECT_CB,(Icallback)&goColorbarSelect);
}
void* iupGetColorbarSelect(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SELECT_CB);
}

#define GO_SWITCH_CB GOIUP IUP_SWITCH_CB
extern int goColorbarSwitch(Ihandle*,int,int);
void iupSetColorbarSwitch(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SWITCH_CB,ptr);
	IupSetCallback(ih,IUP_SWITCH_CB,(Icallback)&goColorbarSwitch);
}
void* iupGetColorbarSwitch(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SWITCH_CB);
}

#define GO_CHANGE_CB GOIUP IUP_CHANGE_CB
extern int goColorBrowserChange(Ihandle*,unsigned char,unsigned char,unsigned char);
void iupSetColorBrowserChange(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CHANGE_CB,ptr);
	IupSetCallback(ih,IUP_CHANGE_CB,(Icallback)&goColorBrowserChange);
}
void* iupGetColorBrowserChange(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CHANGE_CB);
}

#define GO_DRAG_CB GOIUP IUP_DRAG_CB
extern int goColorBrowserDrag(Ihandle*,unsigned char,unsigned char,unsigned char);
void iupSetColorBrowserDrag(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DRAG_CB,ptr);
	IupSetCallback(ih,IUP_DRAG_CB,(Icallback)&goColorBrowserDrag);
}
void* iupGetColorBrowserDrag(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DRAG_CB);
}

#define GO_BUTTON_PRESS_CB GOIUP IUP_BUTTON_PRESS_CB
extern int goDialButtonPress(Ihandle*,double);
void iupSetDialButtonPress(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BUTTON_PRESS_CB,ptr);
	IupSetCallback(ih,IUP_BUTTON_PRESS_CB,(Icallback)&goDialButtonPress);
}
void* iupGetDialButtonPress(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BUTTON_PRESS_CB);
}

#define GO_BUTTON_RELEASE_CB GOIUP IUP_BUTTON_RELEASE_CB
extern int goDialButtonRelease(Ihandle*,double);
void iupSetDialButtonRelease(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BUTTON_RELEASE_CB,ptr);
	IupSetCallback(ih,IUP_BUTTON_RELEASE_CB,(Icallback)&goDialButtonRelease);
}
void* iupGetDialButtonRelease(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BUTTON_RELEASE_CB);
}

#define GO_MOUSEMOVE_CB GOIUP IUP_MOUSEMOVE_CB
extern int goDialMouseMove(Ihandle*,double);
void iupSetDialMouseMove(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MOUSEMOVE_CB,ptr);
	IupSetCallback(ih,IUP_MOUSEMOVE_CB,(Icallback)&goDialMouseMove);
}
void* iupGetDialMouseMove(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MOUSEMOVE_CB);
}

#define GO_ACTION_CB GOIUP IUP_ACTION_CB
extern int goMatrixAction(Ihandle*,int,int,int,int,char*);
void iupSetMatrixAction(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ACTION_CB,ptr);
	IupSetCallback(ih,IUP_ACTION_CB,(Icallback)&goMatrixAction);
}
void* iupGetMatrixAction(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ACTION_CB);
}

#define GO_CLICK_CB GOIUP IUP_CLICK_CB
extern int goMatrixClick(Ihandle*,int,int,char*);
void iupSetMatrixClick(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_CLICK_CB,ptr);
	IupSetCallback(ih,IUP_CLICK_CB,(Icallback)&goMatrixClick);
}
void* iupGetMatrixClick(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_CLICK_CB);
}

#define GO_RELEASE_CB GOIUP IUP_RELEASE_CB
extern int goMatrixRelease(Ihandle*,int,int,char*);
void iupSetMatrixRelease(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_RELEASE_CB,ptr);
	IupSetCallback(ih,IUP_RELEASE_CB,(Icallback)&goMatrixRelease);
}
void* iupGetMatrixRelease(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_RELEASE_CB);
}

#define GO_MOUSEMOVE_CB GOIUP IUP_MOUSEMOVE_CB
extern int goMatrixMouseMove(Ihandle*,int,int);
void iupSetMatrixMouseMove(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MOUSEMOVE_CB,ptr);
	IupSetCallback(ih,IUP_MOUSEMOVE_CB,(Icallback)&goMatrixMouseMove);
}
void* iupGetMatrixMouseMove(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MOUSEMOVE_CB);
}

#define GO_ENTERITEM_CB GOIUP IUP_ENTERITEM_CB
extern int goMatrixEnterItem(Ihandle*,int,int);
void iupSetMatrixEnterItem(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ENTERITEM_CB,ptr);
	IupSetCallback(ih,IUP_ENTERITEM_CB,(Icallback)&goMatrixEnterItem);
}
void* iupGetMatrixEnterItem(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ENTERITEM_CB);
}

#define GO_LEAVEITEM_CB GOIUP IUP_LEAVEITEM_CB
extern int goMatrixLeaveItem(Ihandle*,int,int);
void iupSetMatrixLeaveItem(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_LEAVEITEM_CB,ptr);
	IupSetCallback(ih,IUP_LEAVEITEM_CB,(Icallback)&goMatrixLeaveItem);
}
void* iupGetMatrixLeaveItem(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_LEAVEITEM_CB);
}

#define GO_SCROLLTOP_CB GOIUP IUP_SCROLLTOP_CB
extern int goMatrixScrollTop(Ihandle*,int,int);
void iupSetMatrixScrollTop(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SCROLLTOP_CB,ptr);
	IupSetCallback(ih,IUP_SCROLLTOP_CB,(Icallback)&goMatrixScrollTop);
}
void* iupGetMatrixScrollTop(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SCROLLTOP_CB);
}

#define GO_BGCOLOR_CB GOIUP IUP_BGCOLOR_CB
extern int goMatrixBgcolor(Ihandle*,int,int,unsigned int*,unsigned int*,unsigned int*);
void iupSetMatrixBgcolor(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_BGCOLOR_CB,ptr);
	IupSetCallback(ih,IUP_BGCOLOR_CB,(Icallback)&goMatrixBgcolor);
}
void* iupGetMatrixBgcolor(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_BGCOLOR_CB);
}

#define GO_FGCOLOR_CB GOIUP IUP_FGCOLOR_CB
extern int goMatrixFgcolor(Ihandle*,int,int,unsigned int*,unsigned int*,unsigned int*);
void iupSetMatrixFgcolor(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_FGCOLOR_CB,ptr);
	IupSetCallback(ih,IUP_FGCOLOR_CB,(Icallback)&goMatrixFgcolor);
}
void* iupGetMatrixFgcolor(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_FGCOLOR_CB);
}

#define GO_FONT_CB GOIUP IUP_FONT_CB
extern int goMatrixFont(Ihandle*,int,int);
void iupSetMatrixFont(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_FONT_CB,ptr);
	IupSetCallback(ih,IUP_FONT_CB,(Icallback)&goMatrixFont);
}
void* iupGetMatrixFont(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_FONT_CB);
}

#define GO_DRAW_CB GOIUP IUP_DRAW_CB
extern int goMatrixDraw(Ihandle*,int,int,int,int,int,int,void*);
void iupSetMatrixDraw(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DRAW_CB,ptr);
	IupSetCallback(ih,IUP_DRAW_CB,(Icallback)&goMatrixDraw);
}
void* iupGetMatrixDraw(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DRAW_CB);
}

#define GO_DROPCHECK_CB GOIUP IUP_DROPCHECK_CB
extern int goMatrixDropCheck(Ihandle*,int,int);
void iupSetMatrixDropCheck(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPCHECK_CB,ptr);
	IupSetCallback(ih,IUP_DROPCHECK_CB,(Icallback)&goMatrixDropCheck);
}
void* iupGetMatrixDropCheck(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPCHECK_CB);
}

#define GO_DROP_CB GOIUP IUP_DROP_CB
extern int goMatrixDrop(Ihandle*,int,int);
void iupSetMatrixDrop(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROP_CB,ptr);
	IupSetCallback(ih,IUP_DROP_CB,(Icallback)&goMatrixDrop);
}
void* iupGetMatrixDrop(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROP_CB);
}

#define GO_DROPSELECT_CB GOIUP IUP_DROPSELECT_CB
extern int goMatrixDropSelect(Ihandle*,int,int,Ihandle*,char*,int,int);
void iupSetMatrixDropSelect(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DROPSELECT_CB,ptr);
	IupSetCallback(ih,IUP_DROPSELECT_CB,(Icallback)&goMatrixDropSelect);
}
void* iupGetMatrixDropSelect(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DROPSELECT_CB);
}

#define GO_EDITION_CB GOIUP IUP_EDITION_CB
extern int goMatrixEdition(Ihandle*,int,int,int,int);
void iupSetMatrixEdition(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EDITION_CB,ptr);
	IupSetCallback(ih,IUP_EDITION_CB,(Icallback)&goMatrixEdition);
}
void* iupGetMatrixEdition(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EDITION_CB);
}

#define GO_VALUE_CB GOIUP IUP_VALUE_CB
extern int goMatrixValue(Ihandle*,int,int);
void iupSetMatrixValue(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_VALUE_CB,ptr);
	IupSetCallback(ih,IUP_VALUE_CB,(Icallback)&goMatrixValue);
}
void* iupGetMatrixValue(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_VALUE_CB);
}

#define GO_VALUE_EDIT_CB GOIUP IUP_VALUE_EDIT_CB
extern int goMatrixValueEdit(Ihandle*,int,int,char*);
void iupSetMatrixValueEdit(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_VALUE_EDIT_CB,ptr);
	IupSetCallback(ih,IUP_VALUE_EDIT_CB,(Icallback)&goMatrixValueEdit);
}
void* iupGetMatrixValueEdit(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_VALUE_EDIT_CB);
}

#define GO_MARK_CB GOIUP IUP_MARK_CB
extern int goMatrixMark(Ihandle*,int,int);
void iupSetMatrixMark(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MARK_CB,ptr);
	IupSetCallback(ih,IUP_MARK_CB,(Icallback)&goMatrixMark);
}
void* iupGetMatrixMark(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MARK_CB);
}

#define GO_MARKEDIT_CB GOIUP IUP_MARKEDIT_CB
extern int goMatrixMarkEdit(Ihandle*,int,int,int);
void iupSetMatrixMarkEdit(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_MARKEDIT_CB,ptr);
	IupSetCallback(ih,IUP_MARKEDIT_CB,(Icallback)&goMatrixMarkEdit);
}
void* iupGetMatrixMarkEdit(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_MARKEDIT_CB);
}

#define GO_DELETE_CB GOIUP IUP_DELETE_CB
extern int goPPlotDelete(Ihandle*,int,int,float,float);
void iupSetPPlotDelete(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DELETE_CB,ptr);
	IupSetCallback(ih,IUP_DELETE_CB,(Icallback)&goPPlotDelete);
}
void* iupGetPPlotDelete(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DELETE_CB);
}

#define GO_DELETEBEGIN_CB GOIUP IUP_DELETEBEGIN_CB
extern int goPPlotDeleteBegin(Ihandle*);
void iupSetPPlotDeleteBegin(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DELETEBEGIN_CB,ptr);
	IupSetCallback(ih,IUP_DELETEBEGIN_CB,(Icallback)&goPPlotDeleteBegin);
}
void* iupGetPPlotDeleteBegin(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DELETEBEGIN_CB);
}

#define GO_DELETEEND_CB GOIUP IUP_DELETEEND_CB
extern int goPPlotDeleteEnd(Ihandle*);
void iupSetPPlotDeleteEnd(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_DELETEEND_CB,ptr);
	IupSetCallback(ih,IUP_DELETEEND_CB,(Icallback)&goPPlotDeleteEnd);
}
void* iupGetPPlotDeleteEnd(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_DELETEEND_CB);
}

#define GO_SELECT_CB GOIUP IUP_SELECT_CB
extern int goPPlotSelect(Ihandle*,int,int,float,float,int);
void iupSetPPlotSelect(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SELECT_CB,ptr);
	IupSetCallback(ih,IUP_SELECT_CB,(Icallback)&goPPlotSelect);
}
void* iupGetPPlotSelect(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SELECT_CB);
}

#define GO_SELECTBEGIN_CB GOIUP IUP_SELECTBEGIN_CB
extern int goPPlotSelectBegin(Ihandle*);
void iupSetPPlotSelectBegin(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SELECTBEGIN_CB,ptr);
	IupSetCallback(ih,IUP_SELECTBEGIN_CB,(Icallback)&goPPlotSelectBegin);
}
void* iupGetPPlotSelectBegin(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SELECTBEGIN_CB);
}

#define GO_SELECTEND_CB GOIUP IUP_SELECTEND_CB
extern int goPPlotSelectEnd(Ihandle*);
void iupSetPPlotSelectEnd(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_SELECTEND_CB,ptr);
	IupSetCallback(ih,IUP_SELECTEND_CB,(Icallback)&goPPlotSelectEnd);
}
void* iupGetPPlotSelectEnd(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_SELECTEND_CB);
}

#define GO_EDIT_CB GOIUP IUP_EDIT_CB
extern int goPPlotEdit(Ihandle*,int,int,float,float,float*,float*);
void iupSetPPlotEdit(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EDIT_CB,ptr);
	IupSetCallback(ih,IUP_EDIT_CB,(Icallback)&goPPlotEdit);
}
void* iupGetPPlotEdit(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EDIT_CB);
}

#define GO_EDITBEGIN_CB GOIUP IUP_EDITBEGIN_CB
extern int goPPlotEditBegin(Ihandle*);
void iupSetPPlotEditBegin(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EDITBEGIN_CB,ptr);
	IupSetCallback(ih,IUP_EDITBEGIN_CB,(Icallback)&goPPlotEditBegin);
}
void* iupGetPPlotEditBegin(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EDITBEGIN_CB);
}

#define GO_EDITEND_CB GOIUP IUP_EDITEND_CB
extern int goPPlotEditEnd(Ihandle*);
void iupSetPPlotEditEnd(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_EDITEND_CB,ptr);
	IupSetCallback(ih,IUP_EDITEND_CB,(Icallback)&goPPlotEditEnd);
}
void* iupGetPPlotEditEnd(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_EDITEND_CB);
}

#define GO_PREDRAW_CB GOIUP IUP_PREDRAW_CB
extern int goPPlotPreDraw(Ihandle*,void*);
void iupSetPPlotPreDraw(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_PREDRAW_CB,ptr);
	IupSetCallback(ih,IUP_PREDRAW_CB,(Icallback)&goPPlotPreDraw);
}
void* iupGetPPlotPreDraw(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_PREDRAW_CB);
}

#define GO_POSTDRAW_CB GOIUP IUP_POSTDRAW_CB
extern int goPPlotPostDraw(Ihandle*,void*);
void iupSetPPlotPostDraw(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_POSTDRAW_CB,ptr);
	IupSetCallback(ih,IUP_POSTDRAW_CB,(Icallback)&goPPlotPostDraw);
}
void* iupGetPPlotPostDraw(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_POSTDRAW_CB);
}

#define GO_COMPLETED_CB GOIUP IUP_COMPLETED_CB
extern int goWebBrowserCompleted(Ihandle*,char*);
void iupSetWebBrowserCompleted(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_COMPLETED_CB,ptr);
	IupSetCallback(ih,IUP_COMPLETED_CB,(Icallback)&goWebBrowserCompleted);
}
void* iupGetWebBrowserCompleted(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_COMPLETED_CB);
}

#define GO_ERROR_CB GOIUP IUP_ERROR_CB
extern int goWebBrowserError(Ihandle*,char*);
void iupSetWebBrowserError(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_ERROR_CB,ptr);
	IupSetCallback(ih,IUP_ERROR_CB,(Icallback)&goWebBrowserError);
}
void* iupGetWebBrowserError(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_ERROR_CB);
}

#define GO_NAVIGATE_CB GOIUP IUP_NAVIGATE_CB
extern int goWebBrowserNavigate(Ihandle*,char*);
void iupSetWebBrowserNavigate(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_NAVIGATE_CB,ptr);
	IupSetCallback(ih,IUP_NAVIGATE_CB,(Icallback)&goWebBrowserNavigate);
}
void* iupGetWebBrowserNavigate(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_NAVIGATE_CB);
}

#define GO_NEWWINDOW_CB GOIUP IUP_NEWWINDOW_CB
extern int goWebBrowserNewWindow(Ihandle*,char*);
void iupSetWebBrowserNewWindow(Ihandle* ih,void* ptr)
{
	IupSetAttribute(ih,GO_NEWWINDOW_CB,ptr);
	IupSetCallback(ih,IUP_NEWWINDOW_CB,(Icallback)&goWebBrowserNewWindow);
}
void* iupGetWebBrowserNewWindow(Ihandle* ih)
{
	return IupGetAttribute(ih,GO_NEWWINDOW_CB);
}

*/
import "C"
import (
	"unsafe"
)

const (
	DIALOG = "dialog"
	FILEDLG = "filedlg"
	MESSAGEDLG = "messagedlg"
	COLORDLG = "colordlg"
	FONTDLG = "fontdlg"
	FILL = "fill"
	HBOX = "hbox"
	VBOX = "vbox"
	ZBOX = "zbox"
	RADIO = "radio"
	NORMALIZER = "normalizer"
	CBOX = "cbox"
	SBOX = "sbox"
	SPLIT = "split"
	ITEM = "item"
	MENU = "menu"
	SEPARATOR = "separator"
	SUBMENU = "submenu"
	CLIPBOARD = "clipboard"
	TIMER = "timer"
	USER = "user"
	BUTTON = "button"
	CANVAS = "canvas"
	FRAME = "frame"
	LABEL = "label"
	LIST = "list"
	PROGRESSBAR = "progressbar"
	SPIN = "spin"
	SPINBOX = "spinbox"
	TABS = "tabs"
	TEXT = "text"
	TOGGLE = "toggle"
	TREE = "tree"
	VAL = "val"
	CELLS = "cells"
	COLORBAR = "colorbar"
	COLORBROWSER = "colorbrowser"
	DIAL = "dial"
	MATRIX = "matrix"
	OLECONTROL = "olecontrol"
	PPLOT = "pplot"
	WEBBROWSER = "webbrowser"
	TUIOCLIENT = "tuioclient"
)

func RegisterAllClass() {
	RegisterClass("dialog",NewClassInfo("dialog",dialog_SetCallback))
	RegisterClass("filedlg",NewClassInfo("filedlg",filedlg_SetCallback))
	RegisterClass("messagedlg",NewClassInfo("messagedlg",messagedlg_SetCallback))
	RegisterClass("colordlg",NewClassInfo("colordlg",colordlg_SetCallback))
	RegisterClass("fontdlg",NewClassInfo("fontdlg",fontdlg_SetCallback))
	RegisterClass("fill",NewClassInfo("fill",fill_SetCallback))
	RegisterClass("hbox",NewClassInfo("hbox",hbox_SetCallback))
	RegisterClass("vbox",NewClassInfo("vbox",vbox_SetCallback))
	RegisterClass("zbox",NewClassInfo("zbox",zbox_SetCallback))
	RegisterClass("radio",NewClassInfo("radio",radio_SetCallback))
	RegisterClass("normalizer",NewClassInfo("normalizer",normalizer_SetCallback))
	RegisterClass("cbox",NewClassInfo("cbox",cbox_SetCallback))
	RegisterClass("sbox",NewClassInfo("sbox",sbox_SetCallback))
	RegisterClass("split",NewClassInfo("split",split_SetCallback))
	RegisterClass("item",NewClassInfo("item",item_SetCallback))
	RegisterClass("menu",NewClassInfo("menu",menu_SetCallback))
	RegisterClass("separator",NewClassInfo("separator",separator_SetCallback))
	RegisterClass("submenu",NewClassInfo("submenu",submenu_SetCallback))
	RegisterClass("clipboard",NewClassInfo("clipboard",clipboard_SetCallback))
	RegisterClass("timer",NewClassInfo("timer",timer_SetCallback))
	RegisterClass("user",NewClassInfo("user",user_SetCallback))
	RegisterClass("button",NewClassInfo("button",button_SetCallback))
	RegisterClass("canvas",NewClassInfo("canvas",canvas_SetCallback))
	RegisterClass("frame",NewClassInfo("frame",frame_SetCallback))
	RegisterClass("label",NewClassInfo("label",label_SetCallback))
	RegisterClass("list",NewClassInfo("list",list_SetCallback))
	RegisterClass("progressbar",NewClassInfo("progressbar",progressbar_SetCallback))
	RegisterClass("spin",NewClassInfo("spin",spin_SetCallback))
	RegisterClass("spinbox",NewClassInfo("spinbox",spinbox_SetCallback))
	RegisterClass("tabs",NewClassInfo("tabs",tabs_SetCallback))
	RegisterClass("text",NewClassInfo("text",text_SetCallback))
	RegisterClass("toggle",NewClassInfo("toggle",toggle_SetCallback))
	RegisterClass("tree",NewClassInfo("tree",tree_SetCallback))
	RegisterClass("val",NewClassInfo("val",val_SetCallback))
	RegisterClass("cells",NewClassInfo("cells",cells_SetCallback))
	RegisterClass("colorbar",NewClassInfo("colorbar",colorbar_SetCallback))
	RegisterClass("colorbrowser",NewClassInfo("colorbrowser",colorbrowser_SetCallback))
	RegisterClass("dial",NewClassInfo("dial",dial_SetCallback))
	RegisterClass("matrix",NewClassInfo("matrix",matrix_SetCallback))
	RegisterClass("olecontrol",NewClassInfo("olecontrol",olecontrol_SetCallback))
	RegisterClass("pplot",NewClassInfo("pplot",pplot_SetCallback))
	RegisterClass("webbrowser",NewClassInfo("webbrowser",webbrowser_SetCallback))
	RegisterClass("tuioclient",NewClassInfo("tuioclient",tuioclient_SetCallback))
}

// Iup control Dialog
//
// Callback CLOSE_CB : func(arg *DialogClose)
//
// Callback RESIZE_CB : func(arg *DialogResize)
//
// Callback DROPFILES_CB : func(arg *DialogDropFiles)
//
// Callback SHOW_CB : func(arg *DialogShow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dialog(a ...interface{}) *Handle {
	return New(DIALOG, a...)
}

// Iup control FileDlg
//
// Callback FILE_CB : func(arg *FileDlgFile)
//
// Callback HELP_CB : func(arg *CommonHelp)
func FileDlg(a ...interface{}) *Handle {
	return New(FILEDLG, a...)
}

// Iup control MessageDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func MessageDlg(a ...interface{}) *Handle {
	return New(MESSAGEDLG, a...)
}

// Iup control ColorDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func ColorDlg(a ...interface{}) *Handle {
	return New(COLORDLG, a...)
}

// Iup control FontDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func FontDlg(a ...interface{}) *Handle {
	return New(FONTDLG, a...)
}

// Iup control Fill
//
// 
func Fill(a ...interface{}) *Handle {
	return New(FILL, a...)
}

// Iup control Hbox
//
// 
func Hbox(a ...interface{}) *Handle {
	return New(HBOX, a...)
}

// Iup control Vbox
//
// 
func Vbox(a ...interface{}) *Handle {
	return New(VBOX, a...)
}

// Iup control Zbox
//
// 
func Zbox(a ...interface{}) *Handle {
	return New(ZBOX, a...)
}

// Iup control Radio
//
// 
func Radio(a ...interface{}) *Handle {
	return New(RADIO, a...)
}

// Iup control Normalizer
//
// 
func Normalizer(a ...interface{}) *Handle {
	return New(NORMALIZER, a...)
}

// Iup control Cbox
//
// 
func Cbox(a ...interface{}) *Handle {
	return New(CBOX, a...)
}

// Iup control Sbox
//
// 
func Sbox(a ...interface{}) *Handle {
	return New(SBOX, a...)
}

// Iup control Split
//
// 
func Split(a ...interface{}) *Handle {
	return New(SPLIT, a...)
}

// Iup control Item
//
// Callback ACTION : func(arg *ItemAction)
//
// Callback HIGHLIGHT_CB : func(arg *ItemHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback HELP_CB : func(arg *CommonHelp)
func Item(a ...interface{}) *Handle {
	return New(ITEM, a...)
}

// Iup control Menu
//
// Callback OPEN_CB : func(arg *MenuOpen)
//
// Callback MENUCLOSE_CB : func(arg *MenuClose)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Menu(a ...interface{}) *Handle {
	return New(MENU, a...)
}

// Iup control Separator
//
// 
func Separator(a ...interface{}) *Handle {
	return New(SEPARATOR, a...)
}

// Iup control SubMenu
//
// Callback HIGHLIGHT_CB : func(arg *SubMenuHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func SubMenu(a ...interface{}) *Handle {
	return New(SUBMENU, a...)
}

// Iup control Clipboard
//
// 
func Clipboard(a ...interface{}) *Handle {
	return New(CLIPBOARD, a...)
}

// Iup control Timer
//
// Callback ACTION : func(arg *TimerAction)
func Timer(a ...interface{}) *Handle {
	return New(TIMER, a...)
}

// Iup control User
//
// 
func User(a ...interface{}) *Handle {
	return New(USER, a...)
}

// Iup control Button
//
// Callback ACTION : func(arg *ButtonAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Button(a ...interface{}) *Handle {
	return New(BUTTON, a...)
}

// Iup control Canvas
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *CanvasDropFiles)
//
// Callback FOCUS_CB : func(arg *CanvasFocus)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback WHEEL_CB : func(arg *CanvasWheel)
//
// Callback WOM_CB : func(arg *CanvasWom)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Canvas(a ...interface{}) *Handle {
	return New(CANVAS, a...)
}

// Iup control Frame
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Frame(a ...interface{}) *Handle {
	return New(FRAME, a...)
}

// Iup control Label
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *LabelDropFiles)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func Label(a ...interface{}) *Handle {
	return New(LABEL, a...)
}

// Iup control List
//
// Callback ACTION : func(arg *ListAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *ListCaret)
//
// Callback DBLCLICK_CB : func(arg *ListDblclick)
//
// Callback DROPDOWN_CB : func(arg *ListDropDown)
//
// Callback DROPFILES_CB : func(arg *ListDropFiles)
//
// Callback EDIT_CB : func(arg *ListEdit)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback MULTISELECT_CB : func(arg *ListMultiSelect)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func List(a ...interface{}) *Handle {
	return New(LIST, a...)
}

// Iup control ProgressBar
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func ProgressBar(a ...interface{}) *Handle {
	return New(PROGRESSBAR, a...)
}

// Iup control Spin
//
// Callback SPIN_CB : func(arg *SpinInc)
func Spin(a ...interface{}) *Handle {
	return New(SPIN, a...)
}

// Iup control SpinBox
//
// Callback SPIN_CB : func(arg *SpinBoxInc)
func SpinBox(a ...interface{}) *Handle {
	return New(SPINBOX, a...)
}

// Iup control Tabs
//
// Callback TABCHANGE_CB : func(arg *TabsChange)
//
// Callback TABCHANGEPOS_CB : func(arg *TabsChangePos)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tabs(a ...interface{}) *Handle {
	return New(TABS, a...)
}

// Iup control Text
//
// Callback ACTION : func(arg *TextAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *TextCaret)
//
// Callback DROPFILES_CB : func(arg *TextDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback SPIN_CB : func(arg *TextSpin)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Text(a ...interface{}) *Handle {
	return New(TEXT, a...)
}

// Iup control Toggle
//
// Callback ACTION : func(arg *ToggleAction)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Toggle(a ...interface{}) *Handle {
	return New(TOGGLE, a...)
}

// Iup control Tree
//
// Callback SELECTION_CB : func(arg *TreeSelection)
//
// Callback MULTISELECTION_CB : func(arg *TreeMultiSelection)
//
// Callback BRANCHOPEN_CB : func(arg *TreeBranchOpen)
//
// Callback BRANCHCLOSE_CB : func(arg *TreeBranchClose)
//
// Callback EXECUTELEAF_CB : func(arg *TreeExecuteLeaf)
//
// Callback SHOWRENAME_CB : func(arg *TreeShowRename)
//
// Callback RENAME_CB : func(arg *TreeRename)
//
// Callback DRAGDROP_CB : func(arg *TreeDragDrop)
//
// Callback NODEREMOVED_CB : func(arg *TreeNodeRemoved)
//
// Callback RIGHTCLICK_CB : func(arg *TreeRightClick)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *TreeDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tree(a ...interface{}) *Handle {
	return New(TREE, a...)
}

// Iup control Val
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Val(a ...interface{}) *Handle {
	return New(VAL, a...)
}

// Iup control Cells
//
// Callback DRAW_CB : func(arg *CellsDraw)
//
// Callback HEIGHT_CB : func(arg *CellsHeight)
//
// Callback HSPAN_CB : func(arg *CellsHspan)
//
// Callback MOUSECLICK_CB : func(arg *CellsMouseClick)
//
// Callback MOUSEMOTION_CB : func(arg *CellsMouseMotion)
//
// Callback NCOLS_CB : func(arg *CellsNcols)
//
// Callback NLINES_CB : func(arg *CellsNlines)
//
// Callback SCROLLING_CB : func(arg *CellsScrolling)
//
// Callback VSPAN_CB : func(arg *CellsVspan)
//
// Callback WIDTH_CB : func(arg *CellsWidth)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Cells(a ...interface{}) *Handle {
	return New(CELLS, a...)
}

// Iup control Colorbar
//
// Callback CELL_CB : func(arg *ColorbarCell)
//
// Callback EXTENDED_CB : func(arg *ColorbarExtended)
//
// Callback SELECT_CB : func(arg *ColorbarSelect)
//
// Callback SWITCH_CB : func(arg *ColorbarSwitch)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Colorbar(a ...interface{}) *Handle {
	return New(COLORBAR, a...)
}

// Iup control ColorBrowser
//
// Callback CHANGE_CB : func(arg *ColorBrowserChange)
//
// Callback DRAG_CB : func(arg *ColorBrowserDrag)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func ColorBrowser(a ...interface{}) *Handle {
	return New(COLORBROWSER, a...)
}

// Iup control Dial
//
// Callback BUTTON_PRESS_CB : func(arg *DialButtonPress)
//
// Callback BUTTON_RELEASE_CB : func(arg *DialButtonRelease)
//
// Callback MOUSEMOVE_CB : func(arg *DialMouseMove)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dial(a ...interface{}) *Handle {
	return New(DIAL, a...)
}

// Iup control Matrix
//
// Callback ACTION_CB : func(arg *MatrixAction)
//
// Callback CLICK_CB : func(arg *MatrixClick)
//
// Callback RELEASE_CB : func(arg *MatrixRelease)
//
// Callback MOUSEMOVE_CB : func(arg *MatrixMouseMove)
//
// Callback ENTERITEM_CB : func(arg *MatrixEnterItem)
//
// Callback LEAVEITEM_CB : func(arg *MatrixLeaveItem)
//
// Callback SCROLLTOP_CB : func(arg *MatrixScrollTop)
//
// Callback BGCOLOR_CB : func(arg *MatrixBgcolor)
//
// Callback FGCOLOR_CB : func(arg *MatrixFgcolor)
//
// Callback FONT_CB : func(arg *MatrixFont)
//
// Callback DRAW_CB : func(arg *MatrixDraw)
//
// Callback DROPCHECK_CB : func(arg *MatrixDropCheck)
//
// Callback DROP_CB : func(arg *MatrixDrop)
//
// Callback DROPSELECT_CB : func(arg *MatrixDropSelect)
//
// Callback EDITION_CB : func(arg *MatrixEdition)
//
// Callback VALUE_CB : func(arg *MatrixValue)
//
// Callback VALUE_EDIT_CB : func(arg *MatrixValueEdit)
//
// Callback MARK_CB : func(arg *MatrixMark)
//
// Callback MARKEDIT_CB : func(arg *MatrixMarkEdit)
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback MAP_CB : func(arg *CommonMap)
func Matrix(a ...interface{}) *Handle {
	return New(MATRIX, a...)
}

// Iup control OleControl
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func OleControl(a ...interface{}) *Handle {
	return New(OLECONTROL, a...)
}

// Iup control PPlot
//
// Callback DELETE_CB : func(arg *PPlotDelete)
//
// Callback DELETEBEGIN_CB : func(arg *PPlotDeleteBegin)
//
// Callback DELETEEND_CB : func(arg *PPlotDeleteEnd)
//
// Callback SELECT_CB : func(arg *PPlotSelect)
//
// Callback SELECTBEGIN_CB : func(arg *PPlotSelectBegin)
//
// Callback SELECTEND_CB : func(arg *PPlotSelectEnd)
//
// Callback EDIT_CB : func(arg *PPlotEdit)
//
// Callback EDITBEGIN_CB : func(arg *PPlotEditBegin)
//
// Callback EDITEND_CB : func(arg *PPlotEditEnd)
//
// Callback PREDRAW_CB : func(arg *PPlotPreDraw)
//
// Callback POSTDRAW_CB : func(arg *PPlotPostDraw)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func PPlot(a ...interface{}) *Handle {
	return New(PPLOT, a...)
}

// Iup control WebBrowser
//
// Callback COMPLETED_CB : func(arg *WebBrowserCompleted)
//
// Callback ERROR_CB : func(arg *WebBrowserError)
//
// Callback NAVIGATE_CB : func(arg *WebBrowserNavigate)
//
// Callback NEWWINDOW_CB : func(arg *WebBrowserNewWindow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func WebBrowser(a ...interface{}) *Handle {
	return New(WEBBROWSER, a...)
}

// Iup control TuioClient
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func TuioClient(a ...interface{}) *Handle {
	return New(TUIOCLIENT, a...)
}

// Iup callback IUP_DEFAULT_ACTION
type CommonDefaultAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_MAP_CB
type CommonMap struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_UNMAP_CB
type CommonUnmap struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DESTROY_CB
type CommonDestroy struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_GETFOCUS_CB
type CommonGetFocus struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_KILLFOCUS_CB
type CommonKillFocus struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ENTERWINDOW_CB
type CommonEnterWindow struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_LEAVEWINDOW_CB
type CommonLeaveWindow struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HELP_CB
type CommonHelp struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_K_ANY
type CommonKeyAny struct {
	Sender *Handle
	Return int
	Key int
}

// Iup callback IUP_CLOSE_CB
type DialogClose struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_RESIZE_CB
type DialogResize struct {
	Sender *Handle
	Return int
	Width int
	Height int
}

// Iup callback IUP_DROPFILES_CB
type DialogDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_SHOW_CB
type DialogShow struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_FILE_CB
type FileDlgFile struct {
	Sender *Handle
	Return int
	FileName string
	Status string
}

// Iup callback IUP_ACTION
type ItemAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HIGHLIGHT_CB
type ItemHighlight struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_OPEN_CB
type MenuOpen struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_MENUCLOSE_CB
type MenuClose struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_HIGHLIGHT_CB
type SubMenuHighlight struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ACTION
type TimerAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_ACTION
type ButtonAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_BUTTON_CB
type MouseButton struct {
	Sender *Handle
	Return int
	Button int
	Pressed int
	X int
	Y int
	Status string
}

// Iup callback IUP_ACTION
type CanvasAction struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DROPFILES_CB
type CanvasDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_FOCUS_CB
type CanvasFocus struct {
	Sender *Handle
	Return int
	Focus int
}

// Iup callback IUP_MOTION_CB
type MouseMotion struct {
	Sender *Handle
	Return int
	X int
	Y int
	Status string
}

// Iup callback IUP_KEYPRESS_CB
type CanvasKeyPress struct {
	Sender *Handle
	Return int
	C int
	Press int
}

// Iup callback IUP_RESIZE_CB
type CanvasResize struct {
	Sender *Handle
	Return int
	Width int
	Height int
}

// Iup callback IUP_SCROLL_CB
type CanvasScroll struct {
	Sender *Handle
	Return int
	Op int
	PosX float32
	PosY float32
}

// Iup callback IUP_TOUCH_CB
type TouchEvent struct {
	Sender *Handle
	Return int
	X int
	Y int
	State string
}

// Iup callback IUP_MULTITOUCH_CB
type MultiTouchEvent struct {
	Sender *Handle
	Return int
	Count int
	Pid *int
	Px *int
	Py *int
	PState *int
}

// Iup callback IUP_WHEEL_CB
type CanvasWheel struct {
	Sender *Handle
	Return int
	Delta float32
	X int
	Y int
	Status string
}

// Iup callback IUP_WOM_CB
type CanvasWom struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_DROPFILES_CB
type LabelDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_ACTION
type ListAction struct {
	Sender *Handle
	Return int
	Text string
	Item int
	State int
}

// Iup callback IUP_CARET_CB
type ListCaret struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Pos int
}

// Iup callback IUP_DBLCLICK_CB
type ListDblclick struct {
	Sender *Handle
	Return int
	Item int
	Text string
}

// Iup callback IUP_DROPDOWN_CB
type ListDropDown struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_DROPFILES_CB
type ListDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_EDIT_CB
type ListEdit struct {
	Sender *Handle
	Return int
	C int
	NewValue string
}

// Iup callback IUP_MULTISELECT_CB
type ListMultiSelect struct {
	Sender *Handle
	Return int
	Value string
}

// Iup callback IUP_VALUECHANGED_CB
type ValueChanged struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SPIN_CB
type SpinInc struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_SPIN_CB
type SpinBoxInc struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_TABCHANGE_CB
type TabsChange struct {
	Sender *Handle
	Return int
	NewTab *Handle
	OldTab *Handle
}

// Iup callback IUP_TABCHANGEPOS_CB
type TabsChangePos struct {
	Sender *Handle
	Return int
	NewPos int
	OldPos int
}

// Iup callback IUP_ACTION
type TextAction struct {
	Sender *Handle
	Return int
	C int
	NewValue string
}

// Iup callback IUP_CARET_CB
type TextCaret struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Pos int
}

// Iup callback IUP_DROPFILES_CB
type TextDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_SPIN_CB
type TextSpin struct {
	Sender *Handle
	Return int
	Inc int
}

// Iup callback IUP_ACTION
type ToggleAction struct {
	Sender *Handle
	Return int
	State int
}

// Iup callback IUP_SELECTION_CB
type TreeSelection struct {
	Sender *Handle
	Return int
	Id int
	Status int
}

// Iup callback IUP_MULTISELECTION_CB
type TreeMultiSelection struct {
	Sender *Handle
	Return int
	Ids *int
	N int
}

// Iup callback IUP_BRANCHOPEN_CB
type TreeBranchOpen struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_BRANCHCLOSE_CB
type TreeBranchClose struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_EXECUTELEAF_CB
type TreeExecuteLeaf struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_SHOWRENAME_CB
type TreeShowRename struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_RENAME_CB
type TreeRename struct {
	Sender *Handle
	Return int
	Id int
	Title string
}

// Iup callback IUP_DRAGDROP_CB
type TreeDragDrop struct {
	Sender *Handle
	Return int
	DragId int
	DropId int
	IsShift int
	IsControl int
}

// Iup callback IUP_NODEREMOVED_CB
type TreeNodeRemoved struct {
	Sender *Handle
	Return int
	UserData uintptr
}

// Iup callback IUP_RIGHTCLICK_CB
type TreeRightClick struct {
	Sender *Handle
	Return int
	Id int
}

// Iup callback IUP_DROPFILES_CB
type TreeDropFiles struct {
	Sender *Handle
	Return int
	FileName string
	Num int
	X int
	Y int
}

// Iup callback IUP_DRAW_CB
type CellsDraw struct {
	Sender *Handle
	Return int
	Line int
	Column int
	Xmin int
	Xmax int
	Ymin int
	Ymax int
	Cnv uintptr
}

// Iup callback IUP_HEIGHT_CB
type CellsHeight struct {
	Sender *Handle
	Return int
	Line int
}

// Iup callback IUP_HSPAN_CB
type CellsHspan struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_MOUSECLICK_CB
type CellsMouseClick struct {
	Sender *Handle
	Return int
	Button int
	Pressed int
	Line int
	Column int
	X int
	Y int
	Status string
}

// Iup callback IUP_MOUSEMOTION_CB
type CellsMouseMotion struct {
	Sender *Handle
	Return int
	Line int
	Column int
	X int
	Y int
	R string
}

// Iup callback IUP_NCOLS_CB
type CellsNcols struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_NLINES_CB
type CellsNlines struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SCROLLING_CB
type CellsScrolling struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_VSPAN_CB
type CellsVspan struct {
	Sender *Handle
	Return int
	Line int
	Column int
}

// Iup callback IUP_WIDTH_CB
type CellsWidth struct {
	Sender *Handle
	Return int
	Column int
}

// Iup callback IUP_CELL_CB
type ColorbarCell struct {
	Sender *Handle
	Return string
	Cell int
}

// Iup callback IUP_EXTENDED_CB
type ColorbarExtended struct {
	Sender *Handle
	Return int
	Cell int
}

// Iup callback IUP_SELECT_CB
type ColorbarSelect struct {
	Sender *Handle
	Return int
	Cell int
	Type int
}

// Iup callback IUP_SWITCH_CB
type ColorbarSwitch struct {
	Sender *Handle
	Return int
	PrimCell int
	SecCell int
}

// Iup callback IUP_CHANGE_CB
type ColorBrowserChange struct {
	Sender *Handle
	Return int
	R byte
	G byte
	B byte
}

// Iup callback IUP_DRAG_CB
type ColorBrowserDrag struct {
	Sender *Handle
	Return int
	R byte
	G byte
	B byte
}

// Iup callback IUP_BUTTON_PRESS_CB
type DialButtonPress struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_BUTTON_RELEASE_CB
type DialButtonRelease struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_MOUSEMOVE_CB
type DialMouseMove struct {
	Sender *Handle
	Return int
	Angle float64
}

// Iup callback IUP_ACTION_CB
type MatrixAction struct {
	Sender *Handle
	Return int
	Key int
	Lin int
	Col int
	Edition int
	Value string
}

// Iup callback IUP_CLICK_CB
type MatrixClick struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Status string
}

// Iup callback IUP_RELEASE_CB
type MatrixRelease struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Status string
}

// Iup callback IUP_MOUSEMOVE_CB
type MatrixMouseMove struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_ENTERITEM_CB
type MatrixEnterItem struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_LEAVEITEM_CB
type MatrixLeaveItem struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_SCROLLTOP_CB
type MatrixScrollTop struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_BGCOLOR_CB
type MatrixBgcolor struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Red *uint
	Green *uint
	Blue *uint
}

// Iup callback IUP_FGCOLOR_CB
type MatrixFgcolor struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Red *uint
	Green *uint
	Blue *uint
}

// Iup callback IUP_FONT_CB
type MatrixFont struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DRAW_CB
type MatrixDraw struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	X1 int
	X2 int
	Y1 int
	Y2 int
	Cnv uintptr
}

// Iup callback IUP_DROPCHECK_CB
type MatrixDropCheck struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DROP_CB
type MatrixDrop struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_DROPSELECT_CB
type MatrixDropSelect struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Drop *Handle
	T string
	I int
	V int
}

// Iup callback IUP_EDITION_CB
type MatrixEdition struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Mode int
	Update int
}

// Iup callback IUP_VALUE_CB
type MatrixValue struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_VALUE_EDIT_CB
type MatrixValueEdit struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	NewValue string
}

// Iup callback IUP_MARK_CB
type MatrixMark struct {
	Sender *Handle
	Return int
	Lin int
	Col int
}

// Iup callback IUP_MARKEDIT_CB
type MatrixMarkEdit struct {
	Sender *Handle
	Return int
	Lin int
	Col int
	Marked int
}

// Iup callback IUP_DELETE_CB
type PPlotDelete struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
}

// Iup callback IUP_DELETEBEGIN_CB
type PPlotDeleteBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_DELETEEND_CB
type PPlotDeleteEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SELECT_CB
type PPlotSelect struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
	Select int
}

// Iup callback IUP_SELECTBEGIN_CB
type PPlotSelectBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_SELECTEND_CB
type PPlotSelectEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_EDIT_CB
type PPlotEdit struct {
	Sender *Handle
	Return int
	Index int
	SampleIndex int
	X float32
	Y float32
	NewX *float32
	NewY *float32
}

// Iup callback IUP_EDITBEGIN_CB
type PPlotEditBegin struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_EDITEND_CB
type PPlotEditEnd struct {
	Sender *Handle
	Return int
}

// Iup callback IUP_PREDRAW_CB
type PPlotPreDraw struct {
	Sender *Handle
	Return int
	Canvas uintptr
}

// Iup callback IUP_POSTDRAW_CB
type PPlotPostDraw struct {
	Sender *Handle
	Return int
	Canvas uintptr
}

// Iup callback IUP_COMPLETED_CB
type WebBrowserCompleted struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_ERROR_CB
type WebBrowserError struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_NAVIGATE_CB
type WebBrowserNavigate struct {
	Sender *Handle
	Return int
	Url string
}

// Iup callback IUP_NEWWINDOW_CB
type WebBrowserNewWindow struct {
	Sender *Handle
	Return int
	Url string
}

func common_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonDefaultAction):
		C.iupSetCommonDefaultAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonDestroy):
		C.iupSetCommonDestroy(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonGetFocus):
		C.iupSetCommonGetFocus(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonKillFocus):
		C.iupSetCommonKillFocus(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonKeyAny):
		C.iupSetCommonKeyAny(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func dialog_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*DialogClose):
		C.iupSetDialogClose(h.CHandle(), unsafe.Pointer(&v))
	case func(*DialogResize):
		C.iupSetDialogResize(h.CHandle(), unsafe.Pointer(&v))
	case func(*DialogDropFiles):
		C.iupSetDialogDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*DialogShow):
		C.iupSetDialogShow(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func filedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*FileDlgFile):
		C.iupSetFileDlgFile(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func messagedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func colordlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func fontdlg_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func fill_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func hbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func vbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func zbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func radio_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func normalizer_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func cbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func sbox_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func split_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func item_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ItemAction):
		C.iupSetItemAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*ItemHighlight):
		C.iupSetItemHighlight(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func menu_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MenuOpen):
		C.iupSetMenuOpen(h.CHandle(), unsafe.Pointer(&v))
	case func(*MenuClose):
		C.iupSetMenuClose(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func separator_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func submenu_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SubMenuHighlight):
		C.iupSetSubMenuHighlight(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func clipboard_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func timer_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TimerAction):
		C.iupSetTimerAction(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func user_SetCallback(h *Handle, fn interface{}) bool {
	switch _ := fn.(type) {
	default:
		return false
	}
	return true
}

func button_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ButtonAction):
		C.iupSetButtonAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func canvas_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CanvasAction):
		C.iupSetCanvasAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasDropFiles):
		C.iupSetCanvasDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasFocus):
		C.iupSetCanvasFocus(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasKeyPress):
		C.iupSetCanvasKeyPress(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasResize):
		C.iupSetCanvasResize(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasScroll):
		C.iupSetCanvasScroll(h.CHandle(), unsafe.Pointer(&v))
	case func(*TouchEvent):
		C.iupSetTouchEvent(h.CHandle(), unsafe.Pointer(&v))
	case func(*MultiTouchEvent):
		C.iupSetMultiTouchEvent(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasWheel):
		C.iupSetCanvasWheel(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasWom):
		C.iupSetCanvasWom(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func frame_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func label_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*LabelDropFiles):
		C.iupSetLabelDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func list_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ListAction):
		C.iupSetListAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListCaret):
		C.iupSetListCaret(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListDblclick):
		C.iupSetListDblclick(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListDropDown):
		C.iupSetListDropDown(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListDropFiles):
		C.iupSetListDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListEdit):
		C.iupSetListEdit(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	case func(*ListMultiSelect):
		C.iupSetListMultiSelect(h.CHandle(), unsafe.Pointer(&v))
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func progressbar_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func spin_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SpinInc):
		C.iupSetSpinInc(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func spinbox_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*SpinBoxInc):
		C.iupSetSpinBoxInc(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func tabs_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TabsChange):
		C.iupSetTabsChange(h.CHandle(), unsafe.Pointer(&v))
	case func(*TabsChangePos):
		C.iupSetTabsChangePos(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func text_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TextAction):
		C.iupSetTextAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*TextCaret):
		C.iupSetTextCaret(h.CHandle(), unsafe.Pointer(&v))
	case func(*TextDropFiles):
		C.iupSetTextDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	case func(*TextSpin):
		C.iupSetTextSpin(h.CHandle(), unsafe.Pointer(&v))
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func toggle_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ToggleAction):
		C.iupSetToggleAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func tree_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TreeSelection):
		C.iupSetTreeSelection(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeMultiSelection):
		C.iupSetTreeMultiSelection(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeBranchOpen):
		C.iupSetTreeBranchOpen(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeBranchClose):
		C.iupSetTreeBranchClose(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeExecuteLeaf):
		C.iupSetTreeExecuteLeaf(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeShowRename):
		C.iupSetTreeShowRename(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeRename):
		C.iupSetTreeRename(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeDragDrop):
		C.iupSetTreeDragDrop(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeNodeRemoved):
		C.iupSetTreeNodeRemoved(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeRightClick):
		C.iupSetTreeRightClick(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*TreeDropFiles):
		C.iupSetTreeDropFiles(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func val_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func cells_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CellsDraw):
		C.iupSetCellsDraw(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsHeight):
		C.iupSetCellsHeight(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsHspan):
		C.iupSetCellsHspan(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsMouseClick):
		C.iupSetCellsMouseClick(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsMouseMotion):
		C.iupSetCellsMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsNcols):
		C.iupSetCellsNcols(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsNlines):
		C.iupSetCellsNlines(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsScrolling):
		C.iupSetCellsScrolling(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsVspan):
		C.iupSetCellsVspan(h.CHandle(), unsafe.Pointer(&v))
	case func(*CellsWidth):
		C.iupSetCellsWidth(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func colorbar_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ColorbarCell):
		C.iupSetColorbarCell(h.CHandle(), unsafe.Pointer(&v))
	case func(*ColorbarExtended):
		C.iupSetColorbarExtended(h.CHandle(), unsafe.Pointer(&v))
	case func(*ColorbarSelect):
		C.iupSetColorbarSelect(h.CHandle(), unsafe.Pointer(&v))
	case func(*ColorbarSwitch):
		C.iupSetColorbarSwitch(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func colorbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*ColorBrowserChange):
		C.iupSetColorBrowserChange(h.CHandle(), unsafe.Pointer(&v))
	case func(*ColorBrowserDrag):
		C.iupSetColorBrowserDrag(h.CHandle(), unsafe.Pointer(&v))
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func dial_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*DialButtonPress):
		C.iupSetDialButtonPress(h.CHandle(), unsafe.Pointer(&v))
	case func(*DialButtonRelease):
		C.iupSetDialButtonRelease(h.CHandle(), unsafe.Pointer(&v))
	case func(*DialMouseMove):
		C.iupSetDialMouseMove(h.CHandle(), unsafe.Pointer(&v))
	case func(*ValueChanged):
		C.iupSetValueChanged(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func matrix_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*MatrixAction):
		C.iupSetMatrixAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixClick):
		C.iupSetMatrixClick(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixRelease):
		C.iupSetMatrixRelease(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixMouseMove):
		C.iupSetMatrixMouseMove(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixEnterItem):
		C.iupSetMatrixEnterItem(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixLeaveItem):
		C.iupSetMatrixLeaveItem(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixScrollTop):
		C.iupSetMatrixScrollTop(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixBgcolor):
		C.iupSetMatrixBgcolor(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixFgcolor):
		C.iupSetMatrixFgcolor(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixFont):
		C.iupSetMatrixFont(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixDraw):
		C.iupSetMatrixDraw(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixDropCheck):
		C.iupSetMatrixDropCheck(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixDrop):
		C.iupSetMatrixDrop(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixDropSelect):
		C.iupSetMatrixDropSelect(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixEdition):
		C.iupSetMatrixEdition(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixValue):
		C.iupSetMatrixValue(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixValueEdit):
		C.iupSetMatrixValueEdit(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixMark):
		C.iupSetMatrixMark(h.CHandle(), unsafe.Pointer(&v))
	case func(*MatrixMarkEdit):
		C.iupSetMatrixMarkEdit(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasAction):
		C.iupSetCanvasAction(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasScroll):
		C.iupSetCanvasScroll(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasKeyPress):
		C.iupSetCanvasKeyPress(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.CHandle(), unsafe.Pointer(&v))
	case func(*CanvasResize):
		C.iupSetCanvasResize(h.CHandle(), unsafe.Pointer(&v))
	case func(*MouseButton):
		C.iupSetMouseButton(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func olecontrol_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonGetFocus):
		C.iupSetCommonGetFocus(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonKillFocus):
		C.iupSetCommonKillFocus(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.CHandle(), unsafe.Pointer(&v))
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.CHandle(), unsafe.Pointer(&v))
	default:
		return false
	}
	return true
}

func pplot_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*PPlotDelete):
		C.iupSetPPlotDelete(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotDeleteBegin):
		C.iupSetPPlotDeleteBegin(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotDeleteEnd):
		C.iupSetPPlotDeleteEnd(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotSelect):
		C.iupSetPPlotSelect(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotSelectBegin):
		C.iupSetPPlotSelectBegin(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotSelectEnd):
		C.iupSetPPlotSelectEnd(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotEdit):
		C.iupSetPPlotEdit(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotEditBegin):
		C.iupSetPPlotEditBegin(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotEditEnd):
		C.iupSetPPlotEditEnd(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotPreDraw):
		C.iupSetPPlotPreDraw(h.CHandle(), unsafe.Pointer(&v))
	case func(*PPlotPostDraw):
		C.iupSetPPlotPostDraw(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func webbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*WebBrowserCompleted):
		C.iupSetWebBrowserCompleted(h.CHandle(), unsafe.Pointer(&v))
	case func(*WebBrowserError):
		C.iupSetWebBrowserError(h.CHandle(), unsafe.Pointer(&v))
	case func(*WebBrowserNavigate):
		C.iupSetWebBrowserNavigate(h.CHandle(), unsafe.Pointer(&v))
	case func(*WebBrowserNewWindow):
		C.iupSetWebBrowserNewWindow(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

func tuioclient_SetCallback(h *Handle, fn interface{}) bool {
	switch v := fn.(type) {
	case func(*TouchEvent):
		C.iupSetTouchEvent(h.CHandle(), unsafe.Pointer(&v))
	case func(*MultiTouchEvent):
		C.iupSetMultiTouchEvent(h.CHandle(), unsafe.Pointer(&v))
	default:
		return common_SetCallback(h,fn)
	}
	return true
}

//export goCommonDefaultAction
func goCommonDefaultAction(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonDefaultAction(h.CHandle())
	if fn != nil {
		arg := &CommonDefaultAction{h,DEFAULT}
		(*(*func(*CommonDefaultAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonMap
func goCommonMap(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonMap(h.CHandle())
	if fn != nil {
		arg := &CommonMap{h,DEFAULT}
		(*(*func(*CommonMap))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonUnmap
func goCommonUnmap(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonUnmap(h.CHandle())
	if fn != nil {
		arg := &CommonUnmap{h,DEFAULT}
		(*(*func(*CommonUnmap))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonDestroy
func goCommonDestroy(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonDestroy(h.CHandle())
	if fn != nil {
		arg := &CommonDestroy{h,DEFAULT}
		(*(*func(*CommonDestroy))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonGetFocus
func goCommonGetFocus(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonGetFocus(h.CHandle())
	if fn != nil {
		arg := &CommonGetFocus{h,DEFAULT}
		(*(*func(*CommonGetFocus))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonKillFocus
func goCommonKillFocus(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonKillFocus(h.CHandle())
	if fn != nil {
		arg := &CommonKillFocus{h,DEFAULT}
		(*(*func(*CommonKillFocus))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonEnterWindow
func goCommonEnterWindow(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonEnterWindow(h.CHandle())
	if fn != nil {
		arg := &CommonEnterWindow{h,DEFAULT}
		(*(*func(*CommonEnterWindow))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonLeaveWindow
func goCommonLeaveWindow(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonLeaveWindow(h.CHandle())
	if fn != nil {
		arg := &CommonLeaveWindow{h,DEFAULT}
		(*(*func(*CommonLeaveWindow))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonHelp
func goCommonHelp(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonHelp(h.CHandle())
	if fn != nil {
		arg := &CommonHelp{h,DEFAULT}
		(*(*func(*CommonHelp))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCommonKeyAny
func goCommonKeyAny(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCommonKeyAny(h.CHandle())
	if fn != nil {
		arg := &CommonKeyAny{h,DEFAULT,N1}
		(*(*func(*CommonKeyAny))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialogClose
func goDialogClose(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialogClose(h.CHandle())
	if fn != nil {
		arg := &DialogClose{h,DEFAULT}
		(*(*func(*DialogClose))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialogResize
func goDialogResize(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialogResize(h.CHandle())
	if fn != nil {
		arg := &DialogResize{h,DEFAULT,N1,N2}
		(*(*func(*DialogResize))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialogDropFiles
func goDialogDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialogDropFiles(h.CHandle())
	if fn != nil {
		arg := &DialogDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*DialogDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialogShow
func goDialogShow(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialogShow(h.CHandle())
	if fn != nil {
		arg := &DialogShow{h,DEFAULT,N1}
		(*(*func(*DialogShow))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goFileDlgFile
func goFileDlgFile(ih unsafe.Pointer,N1 *C.char,N2 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetFileDlgFile(h.CHandle())
	if fn != nil {
		arg := &FileDlgFile{h,DEFAULT,C.GoString(N1),C.GoString(N2)}
		(*(*func(*FileDlgFile))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goItemAction
func goItemAction(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetItemAction(h.CHandle())
	if fn != nil {
		arg := &ItemAction{h,DEFAULT}
		(*(*func(*ItemAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goItemHighlight
func goItemHighlight(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetItemHighlight(h.CHandle())
	if fn != nil {
		arg := &ItemHighlight{h,DEFAULT}
		(*(*func(*ItemHighlight))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMenuOpen
func goMenuOpen(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetMenuOpen(h.CHandle())
	if fn != nil {
		arg := &MenuOpen{h,DEFAULT}
		(*(*func(*MenuOpen))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMenuClose
func goMenuClose(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetMenuClose(h.CHandle())
	if fn != nil {
		arg := &MenuClose{h,DEFAULT}
		(*(*func(*MenuClose))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goSubMenuHighlight
func goSubMenuHighlight(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetSubMenuHighlight(h.CHandle())
	if fn != nil {
		arg := &SubMenuHighlight{h,DEFAULT}
		(*(*func(*SubMenuHighlight))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTimerAction
func goTimerAction(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetTimerAction(h.CHandle())
	if fn != nil {
		arg := &TimerAction{h,DEFAULT}
		(*(*func(*TimerAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goButtonAction
func goButtonAction(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetButtonAction(h.CHandle())
	if fn != nil {
		arg := &ButtonAction{h,DEFAULT}
		(*(*func(*ButtonAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMouseButton
func goMouseButton(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMouseButton(h.CHandle())
	if fn != nil {
		arg := &MouseButton{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
		(*(*func(*MouseButton))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasAction
func goCanvasAction(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasAction(h.CHandle())
	if fn != nil {
		arg := &CanvasAction{h,DEFAULT}
		(*(*func(*CanvasAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasDropFiles
func goCanvasDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasDropFiles(h.CHandle())
	if fn != nil {
		arg := &CanvasDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*CanvasDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasFocus
func goCanvasFocus(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasFocus(h.CHandle())
	if fn != nil {
		arg := &CanvasFocus{h,DEFAULT,N1}
		(*(*func(*CanvasFocus))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMouseMotion
func goMouseMotion(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMouseMotion(h.CHandle())
	if fn != nil {
		arg := &MouseMotion{h,DEFAULT,N1,N2,C.GoString(N3)}
		(*(*func(*MouseMotion))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasKeyPress
func goCanvasKeyPress(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasKeyPress(h.CHandle())
	if fn != nil {
		arg := &CanvasKeyPress{h,DEFAULT,N1,N2}
		(*(*func(*CanvasKeyPress))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasResize
func goCanvasResize(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasResize(h.CHandle())
	if fn != nil {
		arg := &CanvasResize{h,DEFAULT,N1,N2}
		(*(*func(*CanvasResize))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasScroll
func goCanvasScroll(ih unsafe.Pointer,N1 int,N2 float32,N3 float32) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasScroll(h.CHandle())
	if fn != nil {
		arg := &CanvasScroll{h,DEFAULT,N1,N2,N3}
		(*(*func(*CanvasScroll))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTouchEvent
func goTouchEvent(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetTouchEvent(h.CHandle())
	if fn != nil {
		arg := &TouchEvent{h,DEFAULT,N1,N2,C.GoString(N3)}
		(*(*func(*TouchEvent))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMultiTouchEvent
func goMultiTouchEvent(ih unsafe.Pointer,N1 int,N2 *int,N3 *int,N4 *int,N5 *int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMultiTouchEvent(h.CHandle())
	if fn != nil {
		arg := &MultiTouchEvent{h,DEFAULT,N1,N2,N3,N4,N5}
		(*(*func(*MultiTouchEvent))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasWheel
func goCanvasWheel(ih unsafe.Pointer,N1 float32,N2 int,N3 int,N4 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasWheel(h.CHandle())
	if fn != nil {
		arg := &CanvasWheel{h,DEFAULT,N1,N2,N3,C.GoString(N4)}
		(*(*func(*CanvasWheel))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCanvasWom
func goCanvasWom(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCanvasWom(h.CHandle())
	if fn != nil {
		arg := &CanvasWom{h,DEFAULT,N1}
		(*(*func(*CanvasWom))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goLabelDropFiles
func goLabelDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetLabelDropFiles(h.CHandle())
	if fn != nil {
		arg := &LabelDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*LabelDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListAction
func goListAction(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetListAction(h.CHandle())
	if fn != nil {
		arg := &ListAction{h,DEFAULT,C.GoString(N1),N2,N3}
		(*(*func(*ListAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListCaret
func goListCaret(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetListCaret(h.CHandle())
	if fn != nil {
		arg := &ListCaret{h,DEFAULT,N1,N2,N3}
		(*(*func(*ListCaret))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListDblclick
func goListDblclick(ih unsafe.Pointer,N1 int,N2 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetListDblclick(h.CHandle())
	if fn != nil {
		arg := &ListDblclick{h,DEFAULT,N1,C.GoString(N2)}
		(*(*func(*ListDblclick))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListDropDown
func goListDropDown(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetListDropDown(h.CHandle())
	if fn != nil {
		arg := &ListDropDown{h,DEFAULT,N1}
		(*(*func(*ListDropDown))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListDropFiles
func goListDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetListDropFiles(h.CHandle())
	if fn != nil {
		arg := &ListDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*ListDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListEdit
func goListEdit(ih unsafe.Pointer,N1 int,N2 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetListEdit(h.CHandle())
	if fn != nil {
		arg := &ListEdit{h,DEFAULT,N1,C.GoString(N2)}
		(*(*func(*ListEdit))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goListMultiSelect
func goListMultiSelect(ih unsafe.Pointer,N1 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetListMultiSelect(h.CHandle())
	if fn != nil {
		arg := &ListMultiSelect{h,DEFAULT,C.GoString(N1)}
		(*(*func(*ListMultiSelect))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goValueChanged
func goValueChanged(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetValueChanged(h.CHandle())
	if fn != nil {
		arg := &ValueChanged{h,DEFAULT}
		(*(*func(*ValueChanged))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goSpinInc
func goSpinInc(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetSpinInc(h.CHandle())
	if fn != nil {
		arg := &SpinInc{h,DEFAULT,N1}
		(*(*func(*SpinInc))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goSpinBoxInc
func goSpinBoxInc(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetSpinBoxInc(h.CHandle())
	if fn != nil {
		arg := &SpinBoxInc{h,DEFAULT,N1}
		(*(*func(*SpinBoxInc))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTabsChange
func goTabsChange(ih unsafe.Pointer,N1 unsafe.Pointer,N2 unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetTabsChange(h.CHandle())
	if fn != nil {
		arg := &TabsChange{h,DEFAULT,(*Handle)(N1),(*Handle)(N2)}
		(*(*func(*TabsChange))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTabsChangePos
func goTabsChangePos(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTabsChangePos(h.CHandle())
	if fn != nil {
		arg := &TabsChangePos{h,DEFAULT,N1,N2}
		(*(*func(*TabsChangePos))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTextAction
func goTextAction(ih unsafe.Pointer,N1 int,N2 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetTextAction(h.CHandle())
	if fn != nil {
		arg := &TextAction{h,DEFAULT,N1,C.GoString(N2)}
		(*(*func(*TextAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTextCaret
func goTextCaret(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTextCaret(h.CHandle())
	if fn != nil {
		arg := &TextCaret{h,DEFAULT,N1,N2,N3}
		(*(*func(*TextCaret))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTextDropFiles
func goTextDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTextDropFiles(h.CHandle())
	if fn != nil {
		arg := &TextDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*TextDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTextSpin
func goTextSpin(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTextSpin(h.CHandle())
	if fn != nil {
		arg := &TextSpin{h,DEFAULT,N1}
		(*(*func(*TextSpin))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goToggleAction
func goToggleAction(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetToggleAction(h.CHandle())
	if fn != nil {
		arg := &ToggleAction{h,DEFAULT,N1}
		(*(*func(*ToggleAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeSelection
func goTreeSelection(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeSelection(h.CHandle())
	if fn != nil {
		arg := &TreeSelection{h,DEFAULT,N1,N2}
		(*(*func(*TreeSelection))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeMultiSelection
func goTreeMultiSelection(ih unsafe.Pointer,N1 *int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeMultiSelection(h.CHandle())
	if fn != nil {
		arg := &TreeMultiSelection{h,DEFAULT,N1,N2}
		(*(*func(*TreeMultiSelection))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeBranchOpen
func goTreeBranchOpen(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeBranchOpen(h.CHandle())
	if fn != nil {
		arg := &TreeBranchOpen{h,DEFAULT,N1}
		(*(*func(*TreeBranchOpen))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeBranchClose
func goTreeBranchClose(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeBranchClose(h.CHandle())
	if fn != nil {
		arg := &TreeBranchClose{h,DEFAULT,N1}
		(*(*func(*TreeBranchClose))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeExecuteLeaf
func goTreeExecuteLeaf(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeExecuteLeaf(h.CHandle())
	if fn != nil {
		arg := &TreeExecuteLeaf{h,DEFAULT,N1}
		(*(*func(*TreeExecuteLeaf))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeShowRename
func goTreeShowRename(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeShowRename(h.CHandle())
	if fn != nil {
		arg := &TreeShowRename{h,DEFAULT,N1}
		(*(*func(*TreeShowRename))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeRename
func goTreeRename(ih unsafe.Pointer,N1 int,N2 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeRename(h.CHandle())
	if fn != nil {
		arg := &TreeRename{h,DEFAULT,N1,C.GoString(N2)}
		(*(*func(*TreeRename))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeDragDrop
func goTreeDragDrop(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeDragDrop(h.CHandle())
	if fn != nil {
		arg := &TreeDragDrop{h,DEFAULT,N1,N2,N3,N4}
		(*(*func(*TreeDragDrop))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeNodeRemoved
func goTreeNodeRemoved(ih unsafe.Pointer,N1 uintptr) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeNodeRemoved(h.CHandle())
	if fn != nil {
		arg := &TreeNodeRemoved{h,DEFAULT,N1}
		(*(*func(*TreeNodeRemoved))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeRightClick
func goTreeRightClick(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeRightClick(h.CHandle())
	if fn != nil {
		arg := &TreeRightClick{h,DEFAULT,N1}
		(*(*func(*TreeRightClick))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goTreeDropFiles
func goTreeDropFiles(ih unsafe.Pointer,N1 *C.char,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetTreeDropFiles(h.CHandle())
	if fn != nil {
		arg := &TreeDropFiles{h,DEFAULT,C.GoString(N1),N2,N3,N4}
		(*(*func(*TreeDropFiles))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsDraw
func goCellsDraw(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 uintptr) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsDraw(h.CHandle())
	if fn != nil {
		arg := &CellsDraw{h,DEFAULT,N1,N2,N3,N4,N5,N6,N7}
		(*(*func(*CellsDraw))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsHeight
func goCellsHeight(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsHeight(h.CHandle())
	if fn != nil {
		arg := &CellsHeight{h,DEFAULT,N1}
		(*(*func(*CellsHeight))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsHspan
func goCellsHspan(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsHspan(h.CHandle())
	if fn != nil {
		arg := &CellsHspan{h,DEFAULT,N1,N2}
		(*(*func(*CellsHspan))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsMouseClick
func goCellsMouseClick(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsMouseClick(h.CHandle())
	if fn != nil {
		arg := &CellsMouseClick{h,DEFAULT,N1,N2,N3,N4,N5,N6,C.GoString(N7)}
		(*(*func(*CellsMouseClick))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsMouseMotion
func goCellsMouseMotion(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsMouseMotion(h.CHandle())
	if fn != nil {
		arg := &CellsMouseMotion{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
		(*(*func(*CellsMouseMotion))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsNcols
func goCellsNcols(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsNcols(h.CHandle())
	if fn != nil {
		arg := &CellsNcols{h,DEFAULT}
		(*(*func(*CellsNcols))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsNlines
func goCellsNlines(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsNlines(h.CHandle())
	if fn != nil {
		arg := &CellsNlines{h,DEFAULT}
		(*(*func(*CellsNlines))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsScrolling
func goCellsScrolling(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsScrolling(h.CHandle())
	if fn != nil {
		arg := &CellsScrolling{h,DEFAULT,N1,N2}
		(*(*func(*CellsScrolling))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsVspan
func goCellsVspan(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsVspan(h.CHandle())
	if fn != nil {
		arg := &CellsVspan{h,DEFAULT,N1,N2}
		(*(*func(*CellsVspan))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goCellsWidth
func goCellsWidth(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetCellsWidth(h.CHandle())
	if fn != nil {
		arg := &CellsWidth{h,DEFAULT,N1}
		(*(*func(*CellsWidth))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goColorbarCell
func goColorbarCell(ih unsafe.Pointer,N1 int) *C.char {
	h := (*Handle)(ih)
	fn := C.iupGetColorbarCell(h.CHandle())
	if fn != nil {
		arg := &ColorbarCell{h,"",N1}
		(*(*func(*ColorbarCell))(fn))(arg)
		size := len(arg.Return)
		ch := make([]byte,size+1)
		copy(ch,arg.Return)
		ch[size] = 0
		return (*C.char)(unsafe.Pointer(&ch[0]))
	}
	return nil
}

//export goColorbarExtended
func goColorbarExtended(ih unsafe.Pointer,N1 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetColorbarExtended(h.CHandle())
	if fn != nil {
		arg := &ColorbarExtended{h,DEFAULT,N1}
		(*(*func(*ColorbarExtended))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goColorbarSelect
func goColorbarSelect(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetColorbarSelect(h.CHandle())
	if fn != nil {
		arg := &ColorbarSelect{h,DEFAULT,N1,N2}
		(*(*func(*ColorbarSelect))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goColorbarSwitch
func goColorbarSwitch(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetColorbarSwitch(h.CHandle())
	if fn != nil {
		arg := &ColorbarSwitch{h,DEFAULT,N1,N2}
		(*(*func(*ColorbarSwitch))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goColorBrowserChange
func goColorBrowserChange(ih unsafe.Pointer,N1 C.uchar,N2 C.uchar,N3 C.uchar) int {
	h := (*Handle)(ih)
	fn := C.iupGetColorBrowserChange(h.CHandle())
	if fn != nil {
		arg := &ColorBrowserChange{h,DEFAULT,byte(N1),byte(N2),byte(N3)}
		(*(*func(*ColorBrowserChange))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goColorBrowserDrag
func goColorBrowserDrag(ih unsafe.Pointer,N1 C.uchar,N2 C.uchar,N3 C.uchar) int {
	h := (*Handle)(ih)
	fn := C.iupGetColorBrowserDrag(h.CHandle())
	if fn != nil {
		arg := &ColorBrowserDrag{h,DEFAULT,byte(N1),byte(N2),byte(N3)}
		(*(*func(*ColorBrowserDrag))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialButtonPress
func goDialButtonPress(ih unsafe.Pointer,N1 float64) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialButtonPress(h.CHandle())
	if fn != nil {
		arg := &DialButtonPress{h,DEFAULT,N1}
		(*(*func(*DialButtonPress))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialButtonRelease
func goDialButtonRelease(ih unsafe.Pointer,N1 float64) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialButtonRelease(h.CHandle())
	if fn != nil {
		arg := &DialButtonRelease{h,DEFAULT,N1}
		(*(*func(*DialButtonRelease))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goDialMouseMove
func goDialMouseMove(ih unsafe.Pointer,N1 float64) int {
	h := (*Handle)(ih)
	fn := C.iupGetDialMouseMove(h.CHandle())
	if fn != nil {
		arg := &DialMouseMove{h,DEFAULT,N1}
		(*(*func(*DialMouseMove))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixAction
func goMatrixAction(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixAction(h.CHandle())
	if fn != nil {
		arg := &MatrixAction{h,DEFAULT,N1,N2,N3,N4,C.GoString(N5)}
		(*(*func(*MatrixAction))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixClick
func goMatrixClick(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixClick(h.CHandle())
	if fn != nil {
		arg := &MatrixClick{h,DEFAULT,N1,N2,C.GoString(N3)}
		(*(*func(*MatrixClick))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixRelease
func goMatrixRelease(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixRelease(h.CHandle())
	if fn != nil {
		arg := &MatrixRelease{h,DEFAULT,N1,N2,C.GoString(N3)}
		(*(*func(*MatrixRelease))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixMouseMove
func goMatrixMouseMove(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixMouseMove(h.CHandle())
	if fn != nil {
		arg := &MatrixMouseMove{h,DEFAULT,N1,N2}
		(*(*func(*MatrixMouseMove))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixEnterItem
func goMatrixEnterItem(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixEnterItem(h.CHandle())
	if fn != nil {
		arg := &MatrixEnterItem{h,DEFAULT,N1,N2}
		(*(*func(*MatrixEnterItem))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixLeaveItem
func goMatrixLeaveItem(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixLeaveItem(h.CHandle())
	if fn != nil {
		arg := &MatrixLeaveItem{h,DEFAULT,N1,N2}
		(*(*func(*MatrixLeaveItem))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixScrollTop
func goMatrixScrollTop(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixScrollTop(h.CHandle())
	if fn != nil {
		arg := &MatrixScrollTop{h,DEFAULT,N1,N2}
		(*(*func(*MatrixScrollTop))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixBgcolor
func goMatrixBgcolor(ih unsafe.Pointer,N1 int,N2 int,N3 *C.uint,N4 *C.uint,N5 *C.uint) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixBgcolor(h.CHandle())
	if fn != nil {
		arg := &MatrixBgcolor{h,DEFAULT,N1,N2,(*uint)(unsafe.Pointer(N3)),(*uint)(unsafe.Pointer(N4)),(*uint)(unsafe.Pointer(N5))}
		(*(*func(*MatrixBgcolor))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixFgcolor
func goMatrixFgcolor(ih unsafe.Pointer,N1 int,N2 int,N3 *C.uint,N4 *C.uint,N5 *C.uint) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixFgcolor(h.CHandle())
	if fn != nil {
		arg := &MatrixFgcolor{h,DEFAULT,N1,N2,(*uint)(unsafe.Pointer(N3)),(*uint)(unsafe.Pointer(N4)),(*uint)(unsafe.Pointer(N5))}
		(*(*func(*MatrixFgcolor))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixFont
func goMatrixFont(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixFont(h.CHandle())
	if fn != nil {
		arg := &MatrixFont{h,DEFAULT,N1,N2}
		(*(*func(*MatrixFont))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixDraw
func goMatrixDraw(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int,N5 int,N6 int,N7 uintptr) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixDraw(h.CHandle())
	if fn != nil {
		arg := &MatrixDraw{h,DEFAULT,N1,N2,N3,N4,N5,N6,N7}
		(*(*func(*MatrixDraw))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixDropCheck
func goMatrixDropCheck(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixDropCheck(h.CHandle())
	if fn != nil {
		arg := &MatrixDropCheck{h,DEFAULT,N1,N2}
		(*(*func(*MatrixDropCheck))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixDrop
func goMatrixDrop(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixDrop(h.CHandle())
	if fn != nil {
		arg := &MatrixDrop{h,DEFAULT,N1,N2}
		(*(*func(*MatrixDrop))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixDropSelect
func goMatrixDropSelect(ih unsafe.Pointer,N1 int,N2 int,N3 unsafe.Pointer,N4 *C.char,N5 int,N6 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixDropSelect(h.CHandle())
	if fn != nil {
		arg := &MatrixDropSelect{h,DEFAULT,N1,N2,(*Handle)(N3),C.GoString(N4),N5,N6}
		(*(*func(*MatrixDropSelect))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixEdition
func goMatrixEdition(ih unsafe.Pointer,N1 int,N2 int,N3 int,N4 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixEdition(h.CHandle())
	if fn != nil {
		arg := &MatrixEdition{h,DEFAULT,N1,N2,N3,N4}
		(*(*func(*MatrixEdition))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixValue
func goMatrixValue(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixValue(h.CHandle())
	if fn != nil {
		arg := &MatrixValue{h,DEFAULT,N1,N2}
		(*(*func(*MatrixValue))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixValueEdit
func goMatrixValueEdit(ih unsafe.Pointer,N1 int,N2 int,N3 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixValueEdit(h.CHandle())
	if fn != nil {
		arg := &MatrixValueEdit{h,DEFAULT,N1,N2,C.GoString(N3)}
		(*(*func(*MatrixValueEdit))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixMark
func goMatrixMark(ih unsafe.Pointer,N1 int,N2 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixMark(h.CHandle())
	if fn != nil {
		arg := &MatrixMark{h,DEFAULT,N1,N2}
		(*(*func(*MatrixMark))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goMatrixMarkEdit
func goMatrixMarkEdit(ih unsafe.Pointer,N1 int,N2 int,N3 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetMatrixMarkEdit(h.CHandle())
	if fn != nil {
		arg := &MatrixMarkEdit{h,DEFAULT,N1,N2,N3}
		(*(*func(*MatrixMarkEdit))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotDelete
func goPPlotDelete(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotDelete(h.CHandle())
	if fn != nil {
		arg := &PPlotDelete{h,DEFAULT,N1,N2,N3,N4}
		(*(*func(*PPlotDelete))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotDeleteBegin
func goPPlotDeleteBegin(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotDeleteBegin(h.CHandle())
	if fn != nil {
		arg := &PPlotDeleteBegin{h,DEFAULT}
		(*(*func(*PPlotDeleteBegin))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotDeleteEnd
func goPPlotDeleteEnd(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotDeleteEnd(h.CHandle())
	if fn != nil {
		arg := &PPlotDeleteEnd{h,DEFAULT}
		(*(*func(*PPlotDeleteEnd))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotSelect
func goPPlotSelect(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32,N5 int) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotSelect(h.CHandle())
	if fn != nil {
		arg := &PPlotSelect{h,DEFAULT,N1,N2,N3,N4,N5}
		(*(*func(*PPlotSelect))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotSelectBegin
func goPPlotSelectBegin(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotSelectBegin(h.CHandle())
	if fn != nil {
		arg := &PPlotSelectBegin{h,DEFAULT}
		(*(*func(*PPlotSelectBegin))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotSelectEnd
func goPPlotSelectEnd(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotSelectEnd(h.CHandle())
	if fn != nil {
		arg := &PPlotSelectEnd{h,DEFAULT}
		(*(*func(*PPlotSelectEnd))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotEdit
func goPPlotEdit(ih unsafe.Pointer,N1 int,N2 int,N3 float32,N4 float32,N5 *float32,N6 *float32) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotEdit(h.CHandle())
	if fn != nil {
		arg := &PPlotEdit{h,DEFAULT,N1,N2,N3,N4,N5,N6}
		(*(*func(*PPlotEdit))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotEditBegin
func goPPlotEditBegin(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotEditBegin(h.CHandle())
	if fn != nil {
		arg := &PPlotEditBegin{h,DEFAULT}
		(*(*func(*PPlotEditBegin))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotEditEnd
func goPPlotEditEnd(ih unsafe.Pointer) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotEditEnd(h.CHandle())
	if fn != nil {
		arg := &PPlotEditEnd{h,DEFAULT}
		(*(*func(*PPlotEditEnd))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotPreDraw
func goPPlotPreDraw(ih unsafe.Pointer,N1 uintptr) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotPreDraw(h.CHandle())
	if fn != nil {
		arg := &PPlotPreDraw{h,DEFAULT,N1}
		(*(*func(*PPlotPreDraw))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goPPlotPostDraw
func goPPlotPostDraw(ih unsafe.Pointer,N1 uintptr) int {
	h := (*Handle)(ih)
	fn := C.iupGetPPlotPostDraw(h.CHandle())
	if fn != nil {
		arg := &PPlotPostDraw{h,DEFAULT,N1}
		(*(*func(*PPlotPostDraw))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goWebBrowserCompleted
func goWebBrowserCompleted(ih unsafe.Pointer,N1 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetWebBrowserCompleted(h.CHandle())
	if fn != nil {
		arg := &WebBrowserCompleted{h,DEFAULT,C.GoString(N1)}
		(*(*func(*WebBrowserCompleted))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goWebBrowserError
func goWebBrowserError(ih unsafe.Pointer,N1 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetWebBrowserError(h.CHandle())
	if fn != nil {
		arg := &WebBrowserError{h,DEFAULT,C.GoString(N1)}
		(*(*func(*WebBrowserError))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goWebBrowserNavigate
func goWebBrowserNavigate(ih unsafe.Pointer,N1 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetWebBrowserNavigate(h.CHandle())
	if fn != nil {
		arg := &WebBrowserNavigate{h,DEFAULT,C.GoString(N1)}
		(*(*func(*WebBrowserNavigate))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}

//export goWebBrowserNewWindow
func goWebBrowserNewWindow(ih unsafe.Pointer,N1 *C.char) int {
	h := (*Handle)(ih)
	fn := C.iupGetWebBrowserNewWindow(h.CHandle())
	if fn != nil {
		arg := &WebBrowserNewWindow{h,DEFAULT,C.GoString(N1)}
		(*(*func(*WebBrowserNewWindow))(fn))(arg)
		return arg.Return
	}
	return DEFAULT
}
